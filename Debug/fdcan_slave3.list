
fdcan_slave3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004874  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004b14  08004b14  00014b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  24000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000104  24000078  08004c40  00020078  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400017c  08004c40  0002017c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cd47  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018ba  00000000  00000000  0002cded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a68  00000000  00000000  0002e6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009a0  00000000  00000000  0002f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036551  00000000  00000000  0002fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000b894  00000000  00000000  00066001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015b289  00000000  00000000  00071895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001ccb1e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002efc  00000000  00000000  001ccb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004afc 	.word	0x08004afc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08004afc 	.word	0x08004afc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000384:	f000 fb7e 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000388:	f000 f86e 	bl	8000468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800038c:	f000 f94e 	bl	800062c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000390:	f000 f8e6 	bl	8000560 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000394:	482c      	ldr	r0, [pc, #176]	; (8000448 <main+0xc8>)
 8000396:	f000 fef9 	bl	800118c <HAL_FDCAN_Start>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <main+0x24>
      {
    	  Error_Handler();
 80003a0:	f000 f9c4 	bl	800072c <Error_Handler>
      }
     if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003a4:	2200      	movs	r2, #0
 80003a6:	2101      	movs	r1, #1
 80003a8:	4827      	ldr	r0, [pc, #156]	; (8000448 <main+0xc8>)
 80003aa:	f000 ff75 	bl	8001298 <HAL_FDCAN_ActivateNotification>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <main+0x38>
       {
         /* Notification Error */
         Error_Handler();
 80003b4:	f000 f9ba 	bl	800072c <Error_Handler>
       }

     TxHeader1.Identifier = node_id;						//change node id by dip switch
 80003b8:	4b24      	ldr	r3, [pc, #144]	; (800044c <main+0xcc>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	461a      	mov	r2, r3
 80003be:	4b24      	ldr	r3, [pc, #144]	; (8000450 <main+0xd0>)
 80003c0:	601a      	str	r2, [r3, #0]
     TxHeader1.IdType = FDCAN_STANDARD_ID;
 80003c2:	4b23      	ldr	r3, [pc, #140]	; (8000450 <main+0xd0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	605a      	str	r2, [r3, #4]
     TxHeader1.TxFrameType = FDCAN_DATA_FRAME;
 80003c8:	4b21      	ldr	r3, [pc, #132]	; (8000450 <main+0xd0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
     TxHeader1.DataLength = FDCAN_DLC_BYTES_12;
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <main+0xd0>)
 80003d0:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80003d4:	60da      	str	r2, [r3, #12]
     TxHeader1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	; (8000450 <main+0xd0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
     TxHeader1.BitRateSwitch = FDCAN_BRS_OFF;
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <main+0xd0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	615a      	str	r2, [r3, #20]
     TxHeader1.FDFormat = FDCAN_FD_CAN;
 80003e2:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <main+0xd0>)
 80003e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003e8:	619a      	str	r2, [r3, #24]
     TxHeader1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <main+0xd0>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
     TxHeader1.MessageMarker = 0;
 80003f0:	4b17      	ldr	r3, [pc, #92]	; (8000450 <main+0xd0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_SET){
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	4816      	ldr	r0, [pc, #88]	; (8000454 <main+0xd4>)
 80003fc:	f001 fb7a 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	2b01      	cmp	r3, #1
 8000404:	d10c      	bne.n	8000420 <main+0xa0>
	  	  	  sprintf ((char *)TxData1, "node");
 8000406:	4914      	ldr	r1, [pc, #80]	; (8000458 <main+0xd8>)
 8000408:	4814      	ldr	r0, [pc, #80]	; (800045c <main+0xdc>)
 800040a:	f003 ff17 	bl	800423c <siprintf>
	  	  	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
 800040e:	2201      	movs	r2, #1
 8000410:	2108      	movs	r1, #8
 8000412:	4813      	ldr	r0, [pc, #76]	; (8000460 <main+0xe0>)
 8000414:	f001 fb86 	bl	8001b24 <HAL_GPIO_WritePin>
	  		  HAL_Delay(10);
 8000418:	200a      	movs	r0, #10
 800041a:	f000 fbc5 	bl	8000ba8 <HAL_Delay>
 800041e:	e003      	b.n	8000428 <main+0xa8>

	  	    }
	  	    else
	  	    {
	  		  	  sprintf ((char *)TxData1, "");
 8000420:	4910      	ldr	r1, [pc, #64]	; (8000464 <main+0xe4>)
 8000422:	480e      	ldr	r0, [pc, #56]	; (800045c <main+0xdc>)
 8000424:	f003 ff0a 	bl	800423c <siprintf>

	  	  	}
	  	  HAL_Delay(1200);
 8000428:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800042c:	f000 fbbc 	bl	8000ba8 <HAL_Delay>
	  	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader1, TxData1)!= HAL_OK)
 8000430:	4a0a      	ldr	r2, [pc, #40]	; (800045c <main+0xdc>)
 8000432:	4907      	ldr	r1, [pc, #28]	; (8000450 <main+0xd0>)
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <main+0xc8>)
 8000436:	f000 fed4 	bl	80011e2 <HAL_FDCAN_AddMessageToTxFifoQ>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d0da      	beq.n	80003f6 <main+0x76>
	  	  {
	  	   Error_Handler();
 8000440:	f000 f974 	bl	800072c <Error_Handler>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)== GPIO_PIN_SET){
 8000444:	e7d7      	b.n	80003f6 <main+0x76>
 8000446:	bf00      	nop
 8000448:	240000c4 	.word	0x240000c4
 800044c:	24000000 	.word	0x24000000
 8000450:	24000094 	.word	0x24000094
 8000454:	58020800 	.word	0x58020800
 8000458:	08004b14 	.word	0x08004b14
 800045c:	240000b8 	.word	0x240000b8
 8000460:	58021000 	.word	0x58021000
 8000464:	08004b1c 	.word	0x08004b1c

08000468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b09c      	sub	sp, #112	; 0x70
 800046c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800046e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000472:	224c      	movs	r2, #76	; 0x4c
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f003 fed8 	bl	800422c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	2220      	movs	r2, #32
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f003 fed2 	bl	800422c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000488:	2002      	movs	r0, #2
 800048a:	f001 fb65 	bl	8001b58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800048e:	2300      	movs	r3, #0
 8000490:	603b      	str	r3, [r7, #0]
 8000492:	4b31      	ldr	r3, [pc, #196]	; (8000558 <SystemClock_Config+0xf0>)
 8000494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000496:	4a30      	ldr	r2, [pc, #192]	; (8000558 <SystemClock_Config+0xf0>)
 8000498:	f023 0301 	bic.w	r3, r3, #1
 800049c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800049e:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <SystemClock_Config+0xf0>)
 80004a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	4b2c      	ldr	r3, [pc, #176]	; (800055c <SystemClock_Config+0xf4>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004b0:	4a2a      	ldr	r2, [pc, #168]	; (800055c <SystemClock_Config+0xf4>)
 80004b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b28      	ldr	r3, [pc, #160]	; (800055c <SystemClock_Config+0xf4>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c4:	bf00      	nop
 80004c6:	4b25      	ldr	r3, [pc, #148]	; (800055c <SystemClock_Config+0xf4>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d2:	d1f8      	bne.n	80004c6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e2:	2302      	movs	r3, #2
 80004e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80004e6:	2305      	movs	r3, #5
 80004e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80004ea:	2360      	movs	r3, #96	; 0x60
 80004ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80004fa:	2308      	movs	r3, #8
 80004fc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004fe:	2300      	movs	r3, #0
 8000500:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fb5e 	bl	8001bcc <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000516:	f000 f909 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	233f      	movs	r3, #63	; 0x3f
 800051c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051e:	2303      	movs	r3, #3
 8000520:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000526:	2308      	movs	r3, #8
 8000528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000532:	2300      	movs	r3, #0
 8000534:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000536:	2300      	movs	r3, #0
 8000538:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2102      	movs	r1, #2
 800053e:	4618      	mov	r0, r3
 8000540:	f001 ff9e 	bl	8002480 <HAL_RCC_ClockConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800054a:	f000 f8ef 	bl	800072c <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3770      	adds	r7, #112	; 0x70
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	58000400 	.word	0x58000400
 800055c:	58024800 	.word	0x58024800

08000560 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000566:	4a30      	ldr	r2, [pc, #192]	; (8000628 <MX_FDCAN1_Init+0xc8>)
 8000568:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 800056a:	4b2e      	ldr	r3, [pc, #184]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 800056c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000570:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000572:	4b2c      	ldr	r3, [pc, #176]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 800057a:	2201      	movs	r2, #1
 800057c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800057e:	4b29      	ldr	r3, [pc, #164]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000580:	2200      	movs	r2, #0
 8000582:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000586:	2200      	movs	r2, #0
 8000588:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 800058c:	2214      	movs	r2, #20
 800058e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000592:	220d      	movs	r2, #13
 8000594:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000596:	4b23      	ldr	r3, [pc, #140]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000598:	2202      	movs	r2, #2
 800059a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800059c:	4b21      	ldr	r3, [pc, #132]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 800059e:	2202      	movs	r2, #2
 80005a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80005a2:	4b20      	ldr	r3, [pc, #128]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005a4:	2219      	movs	r2, #25
 80005a6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005bc:	2200      	movs	r2, #0
 80005be:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005c2:	2201      	movs	r2, #1
 80005c4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80005cc:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005ce:	2201      	movs	r2, #1
 80005d0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 80005d2:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005d4:	2205      	movs	r2, #5
 80005d6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005da:	2200      	movs	r2, #0
 80005dc:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005e0:	2204      	movs	r2, #4
 80005e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 80005fe:	2201      	movs	r2, #1
 8000600:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000604:	2200      	movs	r2, #0
 8000606:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 800060a:	2205      	movs	r2, #5
 800060c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_FDCAN1_Init+0xc4>)
 8000610:	f000 fbde 	bl	8000dd0 <HAL_FDCAN_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 800061a:	f000 f887 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	240000c4 	.word	0x240000c4
 8000628:	4000a000 	.word	0x4000a000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000642:	4b37      	ldr	r3, [pc, #220]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000648:	4a35      	ldr	r2, [pc, #212]	; (8000720 <MX_GPIO_Init+0xf4>)
 800064a:	f043 0310 	orr.w	r3, r3, #16
 800064e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000658:	f003 0310 	and.w	r3, r3, #16
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b2f      	ldr	r3, [pc, #188]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000666:	4a2e      	ldr	r2, [pc, #184]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800068a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800068e:	4b24      	ldr	r3, [pc, #144]	; (8000720 <MX_GPIO_Init+0xf4>)
 8000690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_GPIO_Init+0xf4>)
 800069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a2:	4a1f      	ldr	r2, [pc, #124]	; (8000720 <MX_GPIO_Init+0xf4>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_GPIO_Init+0xf4>)
 80006ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_GPIO_Init+0xf4>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a17      	ldr	r2, [pc, #92]	; (8000720 <MX_GPIO_Init+0xf4>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_GPIO_Init+0xf4>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2108      	movs	r1, #8
 80006dc:	4811      	ldr	r0, [pc, #68]	; (8000724 <MX_GPIO_Init+0xf8>)
 80006de:	f001 fa21 	bl	8001b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480a      	ldr	r0, [pc, #40]	; (8000724 <MX_GPIO_Init+0xf8>)
 80006fa:	f001 f84b 	bl	8001794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000708:	2302      	movs	r3, #2
 800070a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_GPIO_Init+0xfc>)
 8000714:	f001 f83e 	bl	8001794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000718:	bf00      	nop
 800071a:	3728      	adds	r7, #40	; 0x28
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58024400 	.word	0x58024400
 8000724:	58021000 	.word	0x58021000
 8000728:	58020800 	.word	0x58020800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>
	...

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <HAL_MspInit+0x30>)
 8000740:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000744:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x30>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x30>)
 8000750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	58024400 	.word	0x58024400

0800076c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b0ba      	sub	sp, #232	; 0xe8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	22c0      	movs	r2, #192	; 0xc0
 800078a:	2100      	movs	r1, #0
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fd4d 	bl	800422c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a2f      	ldr	r2, [pc, #188]	; (8000854 <HAL_FDCAN_MspInit+0xe8>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d156      	bne.n	800084a <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800079c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007a0:	f04f 0300 	mov.w	r3, #0
 80007a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80007ac:	2310      	movs	r3, #16
 80007ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80007b4:	2304      	movs	r3, #4
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 80007c8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4618      	mov	r0, r3
 80007d6:	f002 f983 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_FDCAN_MspInit+0x78>
    {
      Error_Handler();
 80007e0:	f7ff ffa4 	bl	800072c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_FDCAN_MspInit+0xec>)
 80007e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <HAL_FDCAN_MspInit+0xec>)
 80007ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_FDCAN_MspInit+0xec>)
 80007f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80007fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_FDCAN_MspInit+0xec>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000808:	4a13      	ldr	r2, [pc, #76]	; (8000858 <HAL_FDCAN_MspInit+0xec>)
 800080a:	f043 0308 	orr.w	r3, r3, #8
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_FDCAN_MspInit+0xec>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	f003 0308 	and.w	r3, r3, #8
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000820:	2303      	movs	r3, #3
 8000822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000838:	2309      	movs	r3, #9
 800083a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_FDCAN_MspInit+0xf0>)
 8000846:	f000 ffa5 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	37e8      	adds	r7, #232	; 0xe8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	4000a000 	.word	0x4000a000
 8000858:	58024400 	.word	0x58024400
 800085c:	58020c00 	.word	0x58020c00

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f95c 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008bc:	4a14      	ldr	r2, [pc, #80]	; (8000910 <_sbrk+0x5c>)
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <_sbrk+0x60>)
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d102      	bne.n	80008d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <_sbrk+0x64>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <_sbrk+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <_sbrk+0x64>)
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4413      	add	r3, r2
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d207      	bcs.n	80008f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008e4:	f003 fc6a 	bl	80041bc <__errno>
 80008e8:	4603      	mov	r3, r0
 80008ea:	220c      	movs	r2, #12
 80008ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008ee:	f04f 33ff 	mov.w	r3, #4294967295
 80008f2:	e009      	b.n	8000908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <_sbrk+0x64>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	4a05      	ldr	r2, [pc, #20]	; (8000918 <_sbrk+0x64>)
 8000904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3718      	adds	r7, #24
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	24080000 	.word	0x24080000
 8000914:	00000400 	.word	0x00000400
 8000918:	24000164 	.word	0x24000164
 800091c:	24000180 	.word	0x24000180

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <SystemInit+0xe4>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a36      	ldr	r2, [pc, #216]	; (8000a04 <SystemInit+0xe4>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000934:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <SystemInit+0xe8>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f003 030f 	and.w	r3, r3, #15
 800093c:	2b06      	cmp	r3, #6
 800093e:	d807      	bhi.n	8000950 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000940:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <SystemInit+0xe8>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f023 030f 	bic.w	r3, r3, #15
 8000948:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <SystemInit+0xe8>)
 800094a:	f043 0307 	orr.w	r3, r3, #7
 800094e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000950:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <SystemInit+0xec>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a2d      	ldr	r2, [pc, #180]	; (8000a0c <SystemInit+0xec>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800095c:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <SystemInit+0xec>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000962:	4b2a      	ldr	r3, [pc, #168]	; (8000a0c <SystemInit+0xec>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4929      	ldr	r1, [pc, #164]	; (8000a0c <SystemInit+0xec>)
 8000968:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <SystemInit+0xf0>)
 800096a:	4013      	ands	r3, r2
 800096c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <SystemInit+0xe8>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	2b00      	cmp	r3, #0
 8000978:	d007      	beq.n	800098a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <SystemInit+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f023 030f 	bic.w	r3, r3, #15
 8000982:	4a21      	ldr	r2, [pc, #132]	; (8000a08 <SystemInit+0xe8>)
 8000984:	f043 0307 	orr.w	r3, r3, #7
 8000988:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <SystemInit+0xec>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <SystemInit+0xec>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000996:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <SystemInit+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <SystemInit+0xec>)
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <SystemInit+0xf4>)
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <SystemInit+0xec>)
 80009a4:	4a1c      	ldr	r2, [pc, #112]	; (8000a18 <SystemInit+0xf8>)
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009a8:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <SystemInit+0xec>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <SystemInit+0xfc>)
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <SystemInit+0xec>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <SystemInit+0xec>)
 80009b6:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <SystemInit+0xfc>)
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <SystemInit+0xec>)
 80009bc:	2200      	movs	r2, #0
 80009be:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <SystemInit+0xec>)
 80009c2:	4a16      	ldr	r2, [pc, #88]	; (8000a1c <SystemInit+0xfc>)
 80009c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <SystemInit+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <SystemInit+0xec>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <SystemInit+0xec>)
 80009d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <SystemInit+0xec>)
 80009da:	2200      	movs	r2, #0
 80009dc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <SystemInit+0x100>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <SystemInit+0x104>)
 80009e4:	4013      	ands	r3, r2
 80009e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80009ea:	d202      	bcs.n	80009f2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <SystemInit+0x108>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <SystemInit+0x10c>)
 80009f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80009f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	52002000 	.word	0x52002000
 8000a0c:	58024400 	.word	0x58024400
 8000a10:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a14:	02020200 	.word	0x02020200
 8000a18:	01ff0000 	.word	0x01ff0000
 8000a1c:	01010280 	.word	0x01010280
 8000a20:	5c001000 	.word	0x5c001000
 8000a24:	ffff0000 	.word	0xffff0000
 8000a28:	51008108 	.word	0x51008108
 8000a2c:	52004000 	.word	0x52004000

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a34:	f7ff ff74 	bl	8000920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f003 fbb3 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fc8d 	bl	8000380 <main>
  bx  lr
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a6c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a70:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8000a74:	08004bc8 	.word	0x08004bc8
  ldr r2, =_sbss
 8000a78:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8000a7c:	2400017c 	.word	0x2400017c

08000a80 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC3_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a8a:	2003      	movs	r0, #3
 8000a8c:	f000 f96e 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000a90:	f001 feac 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_Init+0x68>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	0a1b      	lsrs	r3, r3, #8
 8000a9c:	f003 030f 	and.w	r3, r3, #15
 8000aa0:	4913      	ldr	r1, [pc, #76]	; (8000af0 <HAL_Init+0x6c>)
 8000aa2:	5ccb      	ldrb	r3, [r1, r3]
 8000aa4:	f003 031f 	and.w	r3, r3, #31
 8000aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000aac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_Init+0x68>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_Init+0x6c>)
 8000ab8:	5cd3      	ldrb	r3, [r2, r3]
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <HAL_Init+0x70>)
 8000ac6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <HAL_Init+0x74>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f814 	bl	8000afc <HAL_InitTick>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e002      	b.n	8000ae4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ade:	f7ff fe2b 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58024400 	.word	0x58024400
 8000af0:	08004b6c 	.word	0x08004b6c
 8000af4:	24000008 	.word	0x24000008
 8000af8:	24000004 	.word	0x24000004

08000afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_InitTick+0x60>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e021      	b.n	8000b54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <HAL_InitTick+0x64>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_InitTick+0x60>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f945 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f91d 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x68>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	24000010 	.word	0x24000010
 8000b60:	24000004 	.word	0x24000004
 8000b64:	2400000c 	.word	0x2400000c

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	24000010 	.word	0x24000010
 8000b8c:	24000168 	.word	0x24000168

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	24000168 	.word	0x24000168

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	24000010 	.word	0x24000010

08000bf0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetREVID+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	0c1b      	lsrs	r3, r3, #16
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	5c001000 	.word	0x5c001000

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <__NVIC_SetPriorityGrouping+0x40>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x40>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	05fa0000 	.word	0x05fa0000

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff47 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff5e 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff90 	bl	8000cc0 <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5f 	bl	8000c6c <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffb2 	bl	8000d28 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b098      	sub	sp, #96	; 0x60
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000dd8:	4a84      	ldr	r2, [pc, #528]	; (8000fec <HAL_FDCAN_Init+0x21c>)
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4611      	mov	r1, r2
 8000de0:	224c      	movs	r2, #76	; 0x4c
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fa14 	bl	8004210 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e1c6      	b.n	8001180 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a7e      	ldr	r2, [pc, #504]	; (8000ff0 <HAL_FDCAN_Init+0x220>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d106      	bne.n	8000e0a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e04:	461a      	mov	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fca4 	bl	800076c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	699a      	ldr	r2, [r3, #24]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0210 	bic.w	r2, r2, #16
 8000e32:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e34:	f7ff feac 	bl	8000b90 <HAL_GetTick>
 8000e38:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e3a:	e014      	b.n	8000e66 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e3c:	f7ff fea8 	bl	8000b90 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	d90d      	bls.n	8000e66 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e50:	f043 0201 	orr.w	r2, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e18c      	b.n	8001180 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d0e3      	beq.n	8000e3c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	699a      	ldr	r2, [r3, #24]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0201 	orr.w	r2, r2, #1
 8000e82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e84:	f7ff fe84 	bl	8000b90 <HAL_GetTick>
 8000e88:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e8a:	e014      	b.n	8000eb6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e8c:	f7ff fe80 	bl	8000b90 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b0a      	cmp	r3, #10
 8000e98:	d90d      	bls.n	8000eb6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2203      	movs	r2, #3
 8000eae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e164      	b.n	8001180 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0e3      	beq.n	8000e8c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0202 	orr.w	r2, r2, #2
 8000ed2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7c1b      	ldrb	r3, [r3, #16]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	699a      	ldr	r2, [r3, #24]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	e007      	b.n	8000efe <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000efc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7c5b      	ldrb	r3, [r3, #17]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	699a      	ldr	r2, [r3, #24]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f14:	619a      	str	r2, [r3, #24]
 8000f16:	e007      	b.n	8000f28 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	699a      	ldr	r2, [r3, #24]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f26:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7c9b      	ldrb	r3, [r3, #18]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	699a      	ldr	r2, [r3, #24]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f3e:	619a      	str	r2, [r3, #24]
 8000f40:	e007      	b.n	8000f52 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	699a      	ldr	r2, [r3, #24]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000f50:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	699a      	ldr	r2, [r3, #24]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f76:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	691a      	ldr	r2, [r3, #16]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0210 	bic.w	r2, r2, #16
 8000f86:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d108      	bne.n	8000fa2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	699a      	ldr	r2, [r3, #24]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0204 	orr.w	r2, r2, #4
 8000f9e:	619a      	str	r2, [r3, #24]
 8000fa0:	e030      	b.n	8001004 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d02c      	beq.n	8001004 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d020      	beq.n	8000ff4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	699a      	ldr	r2, [r3, #24]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	691a      	ldr	r2, [r3, #16]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f042 0210 	orr.w	r2, r2, #16
 8000fd0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d114      	bne.n	8001004 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	699a      	ldr	r2, [r3, #24]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f042 0220 	orr.w	r2, r2, #32
 8000fe8:	619a      	str	r2, [r3, #24]
 8000fea:	e00b      	b.n	8001004 <HAL_FDCAN_Init+0x234>
 8000fec:	08004b20 	.word	0x08004b20
 8000ff0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0220 	orr.w	r2, r2, #32
 8001002:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	3b01      	subs	r3, #1
 800100a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	3b01      	subs	r3, #1
 8001012:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001014:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800101c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	3b01      	subs	r3, #1
 8001026:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800102c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800102e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001038:	d115      	bne.n	8001066 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	3b01      	subs	r3, #1
 8001046:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001048:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	3b01      	subs	r3, #1
 8001050:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001052:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	3b01      	subs	r3, #1
 800105c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001062:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001064:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00a      	beq.n	8001084 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800108c:	4413      	add	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d011      	beq.n	80010b6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800109a:	f023 0107 	bic.w	r1, r3, #7
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	3360      	adds	r3, #96	; 0x60
 80010a6:	443b      	add	r3, r7
 80010a8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d011      	beq.n	80010e2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010c6:	f023 0107 	bic.w	r1, r3, #7
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	3360      	adds	r3, #96	; 0x60
 80010d2:	443b      	add	r3, r7
 80010d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d012      	beq.n	8001110 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010f2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	3360      	adds	r3, #96	; 0x60
 80010fe:	443b      	add	r3, r7
 8001100:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001104:	011a      	lsls	r2, r3, #4
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001114:	2b00      	cmp	r3, #0
 8001116:	d012      	beq.n	800113e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001120:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	3360      	adds	r3, #96	; 0x60
 800112c:	443b      	add	r3, r7
 800112e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001132:	021a      	lsls	r2, r3, #8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	430a      	orrs	r2, r1
 800113a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a11      	ldr	r2, [pc, #68]	; (8001188 <HAL_FDCAN_Init+0x3b8>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d107      	bne.n	8001158 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f022 0203 	bic.w	r2, r2, #3
 8001156:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f90b 	bl	800138c <FDCAN_CalcultateRamBlockAddresses>
 8001176:	4603      	mov	r3, r0
 8001178:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800117c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001180:	4618      	mov	r0, r3
 8001182:	3760      	adds	r7, #96	; 0x60
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	4000a000 	.word	0x4000a000

0800118c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d111      	bne.n	80011c4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 0201 	bic.w	r2, r2, #1
 80011b6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e008      	b.n	80011d6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011ca:	f043 0204 	orr.w	r2, r3, #4
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
  }
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d141      	bne.n	800127e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001202:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d109      	bne.n	800121e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001210:	f043 0220 	orr.w	r2, r3, #32
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e038      	b.n	8001290 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d009      	beq.n	8001242 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001234:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e026      	b.n	8001290 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800124a:	0c1b      	lsrs	r3, r3, #16
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	68b9      	ldr	r1, [r7, #8]
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f000 fa1d 	bl	8001698 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	fa01 f202 	lsl.w	r2, r1, r2
 800126a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e008      	b.n	8001290 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001284:	f043 0208 	orr.w	r2, r3, #8
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
  }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80012aa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80012ac:	7dfb      	ldrb	r3, [r7, #23]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d002      	beq.n	80012b8 <HAL_FDCAN_ActivateNotification+0x20>
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d155      	bne.n	8001364 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d108      	bne.n	80012d8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0201 	orr.w	r2, r2, #1
 80012d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80012d6:	e014      	b.n	8001302 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4013      	ands	r3, r2
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d108      	bne.n	80012fa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0202 	orr.w	r2, r2, #2
 80012f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80012f8:	e003      	b.n	8001302 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2203      	movs	r2, #3
 8001300:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	430a      	orrs	r2, r1
 800131c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001326:	2b00      	cmp	r3, #0
 8001328:	d009      	beq.n	800133e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	430a      	orrs	r2, r1
 800133a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <HAL_FDCAN_ActivateNotification+0xec>)
 8001348:	4013      	ands	r3, r2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	430b      	orrs	r3, r1
 8001350:	6553      	str	r3, [r2, #84]	; 0x54
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	0f9b      	lsrs	r3, r3, #30
 800135a:	490b      	ldr	r1, [pc, #44]	; (8001388 <HAL_FDCAN_ActivateNotification+0xf0>)
 800135c:	4313      	orrs	r3, r2
 800135e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	e008      	b.n	8001376 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800136a:	f043 0202 	orr.w	r2, r3, #2
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	371c      	adds	r7, #28
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	3fcfffff 	.word	0x3fcfffff
 8001388:	4000a800 	.word	0x4000a800

0800138c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001398:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80013a2:	4ba7      	ldr	r3, [pc, #668]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80013a4:	4013      	ands	r3, r2
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	0091      	lsls	r1, r2, #2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	430b      	orrs	r3, r1
 80013b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013bc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	4413      	add	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80013e2:	4b97      	ldr	r3, [pc, #604]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	0091      	lsls	r1, r2, #2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	430b      	orrs	r3, r1
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001404:	041a      	lsls	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001424:	4b86      	ldr	r3, [pc, #536]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001426:	4013      	ands	r3, r2
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	0091      	lsls	r1, r2, #2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	430b      	orrs	r3, r1
 8001432:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800143e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	041a      	lsls	r2, r3, #16
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	4413      	add	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800146c:	4b74      	ldr	r3, [pc, #464]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800146e:	4013      	ands	r3, r2
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	0091      	lsls	r1, r2, #2
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	430b      	orrs	r3, r1
 800147a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001486:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148e:	041a      	lsls	r2, r3, #16
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80014b4:	4b62      	ldr	r3, [pc, #392]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	0091      	lsls	r1, r2, #2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	430b      	orrs	r3, r1
 80014c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80014e0:	4b57      	ldr	r3, [pc, #348]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	0091      	lsls	r1, r2, #2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001524:	4013      	ands	r3, r2
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	0091      	lsls	r1, r2, #2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	430b      	orrs	r3, r1
 8001530:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800153c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	430a      	orrs	r2, r1
 800154c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001558:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001560:	061a      	lsls	r2, r3, #24
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001570:	4b34      	ldr	r3, [pc, #208]	; (8001644 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001572:	4413      	add	r3, r2
 8001574:	009a      	lsls	r2, r3, #2
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	441a      	add	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	441a      	add	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	441a      	add	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	441a      	add	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	441a      	add	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	441a      	add	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	441a      	add	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001622:	fb01 f303 	mul.w	r3, r1, r3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	441a      	add	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d915      	bls.n	8001668 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800163c:	e006      	b.n	800164c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800163e:	bf00      	nop
 8001640:	ffff0003 	.word	0xffff0003
 8001644:	10002b00 	.word	0x10002b00
 8001648:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001652:	f043 0220 	orr.w	r2, r3, #32
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2203      	movs	r2, #3
 8001660:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e010      	b.n	800168a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	e005      	b.n	800167c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3304      	adds	r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	429a      	cmp	r2, r3
 8001686:	d3f3      	bcc.n	8001670 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10a      	bne.n	80016c4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80016b6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016be:	4313      	orrs	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e00a      	b.n	80016da <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80016cc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80016d2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80016d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016d8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80016e4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80016ea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80016f0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001704:	6839      	ldr	r1, [r7, #0]
 8001706:	fb01 f303 	mul.w	r3, r1, r3
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	3304      	adds	r3, #4
 800171a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	3304      	adds	r3, #4
 8001726:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e020      	b.n	8001770 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3303      	adds	r3, #3
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	3302      	adds	r3, #2
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	440b      	add	r3, r1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001746:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	3301      	adds	r3, #1
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	440b      	add	r3, r1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001754:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	440a      	add	r2, r1
 800175c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800175e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	3304      	adds	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3304      	adds	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	0c1b      	lsrs	r3, r3, #16
 8001776:	4a06      	ldr	r2, [pc, #24]	; (8001790 <FDCAN_CopyMessageToRAM+0xf8>)
 8001778:	5cd3      	ldrb	r3, [r2, r3]
 800177a:	461a      	mov	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4293      	cmp	r3, r2
 8001780:	d3d5      	bcc.n	800172e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3724      	adds	r7, #36	; 0x24
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	08004b7c 	.word	0x08004b7c

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017a2:	4b89      	ldr	r3, [pc, #548]	; (80019c8 <HAL_GPIO_Init+0x234>)
 80017a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017a6:	e194      	b.n	8001ad2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2101      	movs	r1, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8186 	beq.w	8001acc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d005      	beq.n	80017d8 <HAL_GPIO_Init+0x44>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d130      	bne.n	800183a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	2203      	movs	r2, #3
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800180e:	2201      	movs	r2, #1
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4013      	ands	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	091b      	lsrs	r3, r3, #4
 8001824:	f003 0201 	and.w	r2, r3, #1
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
 8001842:	2b03      	cmp	r3, #3
 8001844:	d017      	beq.n	8001876 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d123      	bne.n	80018ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	08da      	lsrs	r2, r3, #3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3208      	adds	r2, #8
 800188a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	69b9      	ldr	r1, [r7, #24]
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	2203      	movs	r2, #3
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80e0 	beq.w	8001acc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190c:	4b2f      	ldr	r3, [pc, #188]	; (80019cc <HAL_GPIO_Init+0x238>)
 800190e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001912:	4a2e      	ldr	r2, [pc, #184]	; (80019cc <HAL_GPIO_Init+0x238>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800191c:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <HAL_GPIO_Init+0x238>)
 800191e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <HAL_GPIO_Init+0x23c>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <HAL_GPIO_Init+0x240>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d052      	beq.n	80019fc <HAL_GPIO_Init+0x268>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_GPIO_Init+0x244>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d031      	beq.n	80019c2 <HAL_GPIO_Init+0x22e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <HAL_GPIO_Init+0x248>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d02b      	beq.n	80019be <HAL_GPIO_Init+0x22a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <HAL_GPIO_Init+0x24c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d025      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <HAL_GPIO_Init+0x250>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01f      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a1b      	ldr	r2, [pc, #108]	; (80019e8 <HAL_GPIO_Init+0x254>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_GPIO_Init+0x258>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x21a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a19      	ldr	r2, [pc, #100]	; (80019f0 <HAL_GPIO_Init+0x25c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x216>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <HAL_GPIO_Init+0x260>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x212>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_GPIO_Init+0x264>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x20e>
 800199e:	2309      	movs	r3, #9
 80019a0:	e02d      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019a2:	230a      	movs	r3, #10
 80019a4:	e02b      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019a6:	2308      	movs	r3, #8
 80019a8:	e029      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e027      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019ae:	2306      	movs	r3, #6
 80019b0:	e025      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019b2:	2305      	movs	r3, #5
 80019b4:	e023      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019b6:	2304      	movs	r3, #4
 80019b8:	e021      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019ba:	2303      	movs	r3, #3
 80019bc:	e01f      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019be:	2302      	movs	r3, #2
 80019c0:	e01d      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e01b      	b.n	80019fe <HAL_GPIO_Init+0x26a>
 80019c6:	bf00      	nop
 80019c8:	58000080 	.word	0x58000080
 80019cc:	58024400 	.word	0x58024400
 80019d0:	58000400 	.word	0x58000400
 80019d4:	58020000 	.word	0x58020000
 80019d8:	58020400 	.word	0x58020400
 80019dc:	58020800 	.word	0x58020800
 80019e0:	58020c00 	.word	0x58020c00
 80019e4:	58021000 	.word	0x58021000
 80019e8:	58021400 	.word	0x58021400
 80019ec:	58021800 	.word	0x58021800
 80019f0:	58021c00 	.word	0x58021c00
 80019f4:	58022000 	.word	0x58022000
 80019f8:	58022400 	.word	0x58022400
 80019fc:	2300      	movs	r3, #0
 80019fe:	69fa      	ldr	r2, [r7, #28]
 8001a00:	f002 0203 	and.w	r2, r2, #3
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	4093      	lsls	r3, r2
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a0e:	4938      	ldr	r1, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x35c>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	089b      	lsrs	r3, r3, #2
 8001a14:	3302      	adds	r3, #2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f47f ae63 	bne.w	80017a8 <HAL_GPIO_Init+0x14>
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	bf00      	nop
 8001ae6:	3724      	adds	r7, #36	; 0x24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	58000400 	.word	0x58000400

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b40:	e003      	b.n	8001b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	041a      	lsls	r2, r3, #16
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	619a      	str	r2, [r3, #24]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00a      	beq.n	8001b82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0307 	and.w	r3, r3, #7
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d001      	beq.n	8001b7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e01f      	b.n	8001bbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e01d      	b.n	8001bbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b82:	4b11      	ldr	r3, [pc, #68]	; (8001bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f023 0207 	bic.w	r2, r3, #7
 8001b8a:	490f      	ldr	r1, [pc, #60]	; (8001bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b92:	f7fe fffd 	bl	8000b90 <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b98:	e009      	b.n	8001bae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b9a:	f7fe fff9 	bl	8000b90 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ba8:	d901      	bls.n	8001bae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e007      	b.n	8001bbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_PWREx_ConfigSupply+0x70>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bba:	d1ee      	bne.n	8001b9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	58024800 	.word	0x58024800

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 bc48 	b.w	8002470 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 8088 	beq.w	8001cfe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bee:	4b99      	ldr	r3, [pc, #612]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d007      	beq.n	8001c14 <HAL_RCC_OscConfig+0x48>
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	2b18      	cmp	r3, #24
 8001c08:	d111      	bne.n	8001c2e <HAL_RCC_OscConfig+0x62>
 8001c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d06d      	beq.n	8001cfc <HAL_RCC_OscConfig+0x130>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d169      	bne.n	8001cfc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f000 bc21 	b.w	8002470 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c36:	d106      	bne.n	8001c46 <HAL_RCC_OscConfig+0x7a>
 8001c38:	4b86      	ldr	r3, [pc, #536]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a85      	ldr	r2, [pc, #532]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	e02e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd8>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <HAL_RCC_OscConfig+0x9c>
 8001c4e:	4b81      	ldr	r3, [pc, #516]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a80      	ldr	r2, [pc, #512]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a7d      	ldr	r2, [pc, #500]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd8>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0xc0>
 8001c72:	4b78      	ldr	r3, [pc, #480]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a77      	ldr	r2, [pc, #476]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b75      	ldr	r3, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a74      	ldr	r2, [pc, #464]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xd8>
 8001c8c:	4b71      	ldr	r3, [pc, #452]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a70      	ldr	r2, [pc, #448]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b6e      	ldr	r3, [pc, #440]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a6d      	ldr	r2, [pc, #436]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe ff70 	bl	8000b90 <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7fe ff6c 	bl	8000b90 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	; 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e3d4      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xe8>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff5c 	bl	8000b90 <HAL_GetTick>
 8001cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7fe ff58 	bl	8000b90 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e3c0      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cee:	4b59      	ldr	r3, [pc, #356]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x110>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80ca 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0c:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d16:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_RCC_OscConfig+0x166>
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	2b18      	cmp	r3, #24
 8001d26:	d156      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x20a>
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d151      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d32:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e392      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d4a:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f023 0219 	bic.w	r2, r3, #25
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	493f      	ldr	r1, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7fe ff18 	bl	8000b90 <HAL_GetTick>
 8001d60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d64:	f7fe ff14 	bl	8000b90 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e37c      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d82:	f7fe ff35 	bl	8000bf0 <HAL_GetREVID>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d817      	bhi.n	8001dc0 <HAL_RCC_OscConfig+0x1f4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d108      	bne.n	8001daa <HAL_RCC_OscConfig+0x1de>
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001da0:	4a2c      	ldr	r2, [pc, #176]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001da2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da8:	e07a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	031b      	lsls	r3, r3, #12
 8001db8:	4926      	ldr	r1, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dbe:	e06f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	4921      	ldr	r1, [pc, #132]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	e064      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d047      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f023 0219 	bic.w	r2, r3, #25
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	491a      	ldr	r1, [pc, #104]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe fece 	bl	8000b90 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df8:	f7fe feca 	bl	8000b90 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e332      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0304 	and.w	r3, r3, #4
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	f7fe feeb 	bl	8000bf0 <HAL_GetREVID>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d819      	bhi.n	8001e58 <HAL_RCC_OscConfig+0x28c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	d108      	bne.n	8001e3e <HAL_RCC_OscConfig+0x272>
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3a:	6053      	str	r3, [r2, #4]
 8001e3c:	e030      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	031b      	lsls	r3, r3, #12
 8001e4c:	4901      	ldr	r1, [pc, #4]	; (8001e54 <HAL_RCC_OscConfig+0x288>)
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	604b      	str	r3, [r1, #4]
 8001e52:	e025      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
 8001e54:	58024400 	.word	0x58024400
 8001e58:	4b9a      	ldr	r3, [pc, #616]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	4997      	ldr	r1, [pc, #604]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
 8001e6c:	e018      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6e:	4b95      	ldr	r3, [pc, #596]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a94      	ldr	r2, [pc, #592]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7a:	f7fe fe89 	bl	8000b90 <HAL_GetTick>
 8001e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e82:	f7fe fe85 	bl	8000b90 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e2ed      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e94:	4b8b      	ldr	r3, [pc, #556]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a9 	beq.w	8002000 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b85      	ldr	r3, [pc, #532]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eb8:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d007      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x308>
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b18      	cmp	r3, #24
 8001ec8:	d13a      	bne.n	8001f40 <HAL_RCC_OscConfig+0x374>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d135      	bne.n	8001f40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed4:	4b7b      	ldr	r3, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_OscConfig+0x320>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	2b80      	cmp	r3, #128	; 0x80
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e2c1      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001eec:	f7fe fe80 	bl	8000bf0 <HAL_GetREVID>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d817      	bhi.n	8001f2a <HAL_RCC_OscConfig+0x35e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d108      	bne.n	8001f14 <HAL_RCC_OscConfig+0x348>
 8001f02:	4b70      	ldr	r3, [pc, #448]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f10:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f12:	e075      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f14:	4b6b      	ldr	r3, [pc, #428]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	069b      	lsls	r3, r3, #26
 8001f22:	4968      	ldr	r1, [pc, #416]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f28:	e06a      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f2a:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	061b      	lsls	r3, r3, #24
 8001f38:	4962      	ldr	r1, [pc, #392]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f3e:	e05f      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d042      	beq.n	8001fce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a5d      	ldr	r2, [pc, #372]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe fe1c 	bl	8000b90 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fe18 	bl	8000b90 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e280      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f6e:	4b55      	ldr	r3, [pc, #340]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f7a:	f7fe fe39 	bl	8000bf0 <HAL_GetREVID>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d817      	bhi.n	8001fb8 <HAL_RCC_OscConfig+0x3ec>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d108      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3d6>
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f98:	4a4a      	ldr	r2, [pc, #296]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f9e:	6053      	str	r3, [r2, #4]
 8001fa0:	e02e      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	069b      	lsls	r3, r3, #26
 8001fb0:	4944      	ldr	r1, [pc, #272]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
 8001fb6:	e023      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
 8001fb8:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	061b      	lsls	r3, r3, #24
 8001fc6:	493f      	ldr	r1, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
 8001fcc:	e018      	b.n	8002000 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fce:	4b3d      	ldr	r3, [pc, #244]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a3c      	ldr	r2, [pc, #240]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fdd9 	bl	8000b90 <HAL_GetTick>
 8001fde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001fe2:	f7fe fdd5 	bl	8000b90 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e23d      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ff4:	4b33      	ldr	r3, [pc, #204]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d036      	beq.n	800207a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002014:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8002016:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002018:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7fe fdb6 	bl	8000b90 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002028:	f7fe fdb2 	bl	8000b90 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e21a      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800203a:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x45c>
 8002046:	e018      	b.n	800207a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7fe fd9c 	bl	8000b90 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe fd98 	bl	8000b90 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e200      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0320 	and.w	r3, r3, #32
 8002082:	2b00      	cmp	r3, #0
 8002084:	d039      	beq.n	80020fa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01c      	beq.n	80020c8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a0c      	ldr	r2, [pc, #48]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 8002094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002098:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800209a:	f7fe fd79 	bl	8000b90 <HAL_GetTick>
 800209e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020a0:	e008      	b.n	80020b4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a2:	f7fe fd75 	bl	8000b90 <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d901      	bls.n	80020b4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020b0:	2303      	movs	r3, #3
 80020b2:	e1dd      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0f0      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4d6>
 80020c0:	e01b      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 80020c2:	bf00      	nop
 80020c4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020c8:	4b9b      	ldr	r3, [pc, #620]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a9a      	ldr	r2, [pc, #616]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80020ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fd5c 	bl	8000b90 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020da:	e008      	b.n	80020ee <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020dc:	f7fe fd58 	bl	8000b90 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e1c0      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ee:	4b92      	ldr	r3, [pc, #584]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f0      	bne.n	80020dc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8081 	beq.w	800220a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002108:	4b8c      	ldr	r3, [pc, #560]	; (800233c <HAL_RCC_OscConfig+0x770>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a8b      	ldr	r2, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x770>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002114:	f7fe fd3c 	bl	8000b90 <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211c:	f7fe fd38 	bl	8000b90 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1a0      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800212e:	4b83      	ldr	r3, [pc, #524]	; (800233c <HAL_RCC_OscConfig+0x770>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d0f0      	beq.n	800211c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d106      	bne.n	8002150 <HAL_RCC_OscConfig+0x584>
 8002142:	4b7d      	ldr	r3, [pc, #500]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a7c      	ldr	r2, [pc, #496]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
 800214e:	e02d      	b.n	80021ac <HAL_RCC_OscConfig+0x5e0>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10c      	bne.n	8002172 <HAL_RCC_OscConfig+0x5a6>
 8002158:	4b77      	ldr	r3, [pc, #476]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	4a76      	ldr	r2, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6713      	str	r3, [r2, #112]	; 0x70
 8002164:	4b74      	ldr	r3, [pc, #464]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4a73      	ldr	r2, [pc, #460]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6713      	str	r3, [r2, #112]	; 0x70
 8002170:	e01c      	b.n	80021ac <HAL_RCC_OscConfig+0x5e0>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b05      	cmp	r3, #5
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x5c8>
 800217a:	4b6f      	ldr	r3, [pc, #444]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800217c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217e:	4a6e      	ldr	r2, [pc, #440]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6713      	str	r3, [r2, #112]	; 0x70
 8002186:	4b6c      	ldr	r3, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218a:	4a6b      	ldr	r2, [pc, #428]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6713      	str	r3, [r2, #112]	; 0x70
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0x5e0>
 8002194:	4b68      	ldr	r3, [pc, #416]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a67      	ldr	r2, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b65      	ldr	r3, [pc, #404]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a64      	ldr	r2, [pc, #400]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	f023 0304 	bic.w	r3, r3, #4
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d015      	beq.n	80021e0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fcec 	bl	8000b90 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fce8 	bl	8000b90 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e14e      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021d2:	4b59      	ldr	r3, [pc, #356]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0ee      	beq.n	80021bc <HAL_RCC_OscConfig+0x5f0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7fe fcd6 	bl	8000b90 <HAL_GetTick>
 80021e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021e6:	e00a      	b.n	80021fe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7fe fcd2 	bl	8000b90 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e138      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021fe:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1ee      	bne.n	80021e8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 812d 	beq.w	800246e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002214:	4b48      	ldr	r3, [pc, #288]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221c:	2b18      	cmp	r3, #24
 800221e:	f000 80bd 	beq.w	800239c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	2b02      	cmp	r3, #2
 8002228:	f040 809e 	bne.w	8002368 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fcaa 	bl	8000b90 <HAL_GetTick>
 800223c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fca6 	bl	8000b90 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e10e      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225e:	4b36      	ldr	r3, [pc, #216]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002262:	4b37      	ldr	r3, [pc, #220]	; (8002340 <HAL_RCC_OscConfig+0x774>)
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	430a      	orrs	r2, r1
 8002272:	4931      	ldr	r1, [pc, #196]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002274:	4313      	orrs	r3, r2
 8002276:	628b      	str	r3, [r1, #40]	; 0x28
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227c:	3b01      	subs	r3, #1
 800227e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002286:	3b01      	subs	r3, #1
 8002288:	025b      	lsls	r3, r3, #9
 800228a:	b29b      	uxth	r3, r3
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	3b01      	subs	r3, #1
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	3b01      	subs	r3, #1
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80022a8:	4923      	ldr	r1, [pc, #140]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ba:	4b1f      	ldr	r3, [pc, #124]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <HAL_RCC_OscConfig+0x778>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80022c6:	00d2      	lsls	r2, r2, #3
 80022c8:	491b      	ldr	r1, [pc, #108]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022ce:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	f023 020c 	bic.w	r2, r3, #12
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	4917      	ldr	r1, [pc, #92]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022e0:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f023 0202 	bic.w	r2, r3, #2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	4912      	ldr	r1, [pc, #72]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800230a:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800230c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002314:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	4a07      	ldr	r2, [pc, #28]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_RCC_OscConfig+0x76c>)
 8002328:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232e:	f7fe fc2f 	bl	8000b90 <HAL_GetTick>
 8002332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002334:	e011      	b.n	800235a <HAL_RCC_OscConfig+0x78e>
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400
 800233c:	58024800 	.word	0x58024800
 8002340:	fffffc0c 	.word	0xfffffc0c
 8002344:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fc22 	bl	8000b90 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e08a      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x77c>
 8002366:	e082      	b.n	800246e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 800236e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fc0c 	bl	8000b90 <HAL_GetTick>
 8002378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe fc08 	bl	8000b90 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e070      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800238e:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x7b0>
 800239a:	e068      	b.n	800246e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023a2:	4b35      	ldr	r3, [pc, #212]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d031      	beq.n	8002414 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d12a      	bne.n	8002414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d122      	bne.n	8002414 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11a      	bne.n	8002414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0a5b      	lsrs	r3, r3, #9
 80023e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d111      	bne.n	8002414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	0c1b      	lsrs	r3, r3, #16
 80023f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0e1b      	lsrs	r3, r3, #24
 8002406:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e02b      	b.n	8002470 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002418:	4b17      	ldr	r3, [pc, #92]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 800241a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800241c:	08db      	lsrs	r3, r3, #3
 800241e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002422:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	429a      	cmp	r2, r3
 800242c:	d01f      	beq.n	800246e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800243a:	f7fe fba9 	bl	8000b90 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002440:	bf00      	nop
 8002442:	f7fe fba5 	bl	8000b90 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	4293      	cmp	r3, r2
 800244c:	d0f9      	beq.n	8002442 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 8002450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_RCC_OscConfig+0x8b0>)
 8002454:	4013      	ands	r3, r2
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800245a:	00d2      	lsls	r2, r2, #3
 800245c:	4906      	ldr	r1, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 800245e:	4313      	orrs	r3, r2
 8002460:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_RCC_OscConfig+0x8ac>)
 8002468:	f043 0301 	orr.w	r3, r3, #1
 800246c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3730      	adds	r7, #48	; 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	58024400 	.word	0x58024400
 800247c:	ffff0007 	.word	0xffff0007

08002480 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e19c      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b8a      	ldr	r3, [pc, #552]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d910      	bls.n	80024c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b87      	ldr	r3, [pc, #540]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 020f 	bic.w	r2, r3, #15
 80024aa:	4985      	ldr	r1, [pc, #532]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	4b83      	ldr	r3, [pc, #524]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e184      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0304 	and.w	r3, r3, #4
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	4b7b      	ldr	r3, [pc, #492]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024dc:	429a      	cmp	r2, r3
 80024de:	d908      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024e0:	4b78      	ldr	r3, [pc, #480]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	4975      	ldr	r1, [pc, #468]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d010      	beq.n	8002520 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	4b70      	ldr	r3, [pc, #448]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800250a:	429a      	cmp	r2, r3
 800250c:	d908      	bls.n	8002520 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800250e:	4b6d      	ldr	r3, [pc, #436]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	496a      	ldr	r1, [pc, #424]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800251c:	4313      	orrs	r3, r2
 800251e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b00      	cmp	r3, #0
 800252a:	d010      	beq.n	800254e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699a      	ldr	r2, [r3, #24]
 8002530:	4b64      	ldr	r3, [pc, #400]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002538:	429a      	cmp	r2, r3
 800253a:	d908      	bls.n	800254e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800253c:	4b61      	ldr	r3, [pc, #388]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	495e      	ldr	r1, [pc, #376]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800254a:	4313      	orrs	r3, r2
 800254c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d010      	beq.n	800257c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002566:	429a      	cmp	r2, r3
 8002568:	d908      	bls.n	800257c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800256a:	4b56      	ldr	r3, [pc, #344]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	4953      	ldr	r1, [pc, #332]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002578:	4313      	orrs	r3, r2
 800257a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d010      	beq.n	80025aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	429a      	cmp	r2, r3
 8002596:	d908      	bls.n	80025aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002598:	4b4a      	ldr	r3, [pc, #296]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f023 020f 	bic.w	r2, r3, #15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4947      	ldr	r1, [pc, #284]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d055      	beq.n	8002662 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025b6:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4940      	ldr	r1, [pc, #256]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d0:	4b3c      	ldr	r3, [pc, #240]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d121      	bne.n	8002620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0f6      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d107      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d115      	bne.n	8002620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0ea      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002600:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0de      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002610:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0d6      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002620:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	f023 0207 	bic.w	r2, r3, #7
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	4925      	ldr	r1, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800262e:	4313      	orrs	r3, r2
 8002630:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002632:	f7fe faad 	bl	8000b90 <HAL_GetTick>
 8002636:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002638:	e00a      	b.n	8002650 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263a:	f7fe faa9 	bl	8000b90 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0be      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002650:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	429a      	cmp	r2, r3
 8002660:	d1eb      	bne.n	800263a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d010      	beq.n	8002690 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	429a      	cmp	r2, r3
 800267c:	d208      	bcs.n	8002690 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f023 020f 	bic.w	r2, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_RCC_ClockConfig+0x244>)
 800268c:	4313      	orrs	r3, r2
 800268e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d214      	bcs.n	80026c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 020f 	bic.w	r2, r3, #15
 80026a6:	4906      	ldr	r1, [pc, #24]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_RCC_ClockConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e086      	b.n	80027ce <HAL_RCC_ClockConfig+0x34e>
 80026c0:	52002000 	.word	0x52002000
 80026c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0304 	and.w	r3, r3, #4
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d208      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026e4:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4939      	ldr	r1, [pc, #228]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800270e:	429a      	cmp	r2, r3
 8002710:	d208      	bcs.n	8002724 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002712:	4b31      	ldr	r3, [pc, #196]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	492e      	ldr	r1, [pc, #184]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002720:	4313      	orrs	r3, r2
 8002722:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	d010      	beq.n	8002752 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699a      	ldr	r2, [r3, #24]
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800273c:	429a      	cmp	r2, r3
 800273e:	d208      	bcs.n	8002752 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4922      	ldr	r1, [pc, #136]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 800274e:	4313      	orrs	r3, r2
 8002750:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d010      	beq.n	8002780 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69da      	ldr	r2, [r3, #28]
 8002762:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276a:	429a      	cmp	r2, r3
 800276c:	d208      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	4917      	ldr	r1, [pc, #92]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 800277c:	4313      	orrs	r3, r2
 800277e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002780:	f000 f834 	bl	80027ec <HAL_RCC_GetSysClockFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	0a1b      	lsrs	r3, r3, #8
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	4912      	ldr	r1, [pc, #72]	; (80027dc <HAL_RCC_ClockConfig+0x35c>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
 800279c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <HAL_RCC_ClockConfig+0x358>)
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	4a0d      	ldr	r2, [pc, #52]	; (80027dc <HAL_RCC_ClockConfig+0x35c>)
 80027a8:	5cd3      	ldrb	r3, [r2, r3]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_RCC_ClockConfig+0x360>)
 80027b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027b8:	4a0a      	ldr	r2, [pc, #40]	; (80027e4 <HAL_RCC_ClockConfig+0x364>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <HAL_RCC_ClockConfig+0x368>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe f99a 	bl	8000afc <HAL_InitTick>
 80027c8:	4603      	mov	r3, r0
 80027ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	58024400 	.word	0x58024400
 80027dc:	08004b6c 	.word	0x08004b6c
 80027e0:	24000008 	.word	0x24000008
 80027e4:	24000004 	.word	0x24000004
 80027e8:	2400000c 	.word	0x2400000c

080027ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f2:	4bb3      	ldr	r3, [pc, #716]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fa:	2b18      	cmp	r3, #24
 80027fc:	f200 8155 	bhi.w	8002aaa <HAL_RCC_GetSysClockFreq+0x2be>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	0800286d 	.word	0x0800286d
 800280c:	08002aab 	.word	0x08002aab
 8002810:	08002aab 	.word	0x08002aab
 8002814:	08002aab 	.word	0x08002aab
 8002818:	08002aab 	.word	0x08002aab
 800281c:	08002aab 	.word	0x08002aab
 8002820:	08002aab 	.word	0x08002aab
 8002824:	08002aab 	.word	0x08002aab
 8002828:	08002893 	.word	0x08002893
 800282c:	08002aab 	.word	0x08002aab
 8002830:	08002aab 	.word	0x08002aab
 8002834:	08002aab 	.word	0x08002aab
 8002838:	08002aab 	.word	0x08002aab
 800283c:	08002aab 	.word	0x08002aab
 8002840:	08002aab 	.word	0x08002aab
 8002844:	08002aab 	.word	0x08002aab
 8002848:	08002899 	.word	0x08002899
 800284c:	08002aab 	.word	0x08002aab
 8002850:	08002aab 	.word	0x08002aab
 8002854:	08002aab 	.word	0x08002aab
 8002858:	08002aab 	.word	0x08002aab
 800285c:	08002aab 	.word	0x08002aab
 8002860:	08002aab 	.word	0x08002aab
 8002864:	08002aab 	.word	0x08002aab
 8002868:	0800289f 	.word	0x0800289f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800286c:	4b94      	ldr	r3, [pc, #592]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002878:	4b91      	ldr	r3, [pc, #580]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	4a90      	ldr	r2, [pc, #576]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800288a:	e111      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800288c:	4b8d      	ldr	r3, [pc, #564]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800288e:	61bb      	str	r3, [r7, #24]
      break;
 8002890:	e10e      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002892:	4b8d      	ldr	r3, [pc, #564]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002894:	61bb      	str	r3, [r7, #24]
      break;
 8002896:	e10b      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002898:	4b8c      	ldr	r3, [pc, #560]	; (8002acc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800289a:	61bb      	str	r3, [r7, #24]
      break;
 800289c:	e108      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800289e:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028a8:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028b4:	4b82      	ldr	r3, [pc, #520]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028be:	4b80      	ldr	r3, [pc, #512]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	08db      	lsrs	r3, r3, #3
 80028c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80e1 	beq.w	8002aa4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	f000 8083 	beq.w	80029f0 <HAL_RCC_GetSysClockFreq+0x204>
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	f200 80a1 	bhi.w	8002a34 <HAL_RCC_GetSysClockFreq+0x248>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x114>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d056      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80028fe:	e099      	b.n	8002a34 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d02d      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800290c:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
 800291c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002936:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002946:	ed97 6a02 	vldr	s12, [r7, #8]
 800294a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800294e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800295a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800295e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002962:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002966:	e087      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002972:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ad4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800297a:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800298a:	ed97 6a02 	vldr	s12, [r7, #8]
 800298e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800299a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800299e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029aa:	e065      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029be:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029c6:	ee07 3a90 	vmov	s15, r3
 80029ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80029d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ee:	e043      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002adc <HAL_RCC_GetSysClockFreq+0x2f0>
 80029fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a02:	4b2f      	ldr	r3, [pc, #188]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a0a:	ee07 3a90 	vmov	s15, r3
 8002a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a32:	e021      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ad8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ad0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a76:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	0a5b      	lsrs	r3, r3, #9
 8002a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a82:	3301      	adds	r3, #1
 8002a84:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a90:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a9c:	ee17 3a90 	vmov	r3, s15
 8002aa0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
      break;
 8002aa8:	e002      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002aaa:	4b07      	ldr	r3, [pc, #28]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002aac:	61bb      	str	r3, [r7, #24]
      break;
 8002aae:	bf00      	nop
  }

  return sysclockfreq;
 8002ab0:	69bb      	ldr	r3, [r7, #24]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	58024400 	.word	0x58024400
 8002ac4:	03d09000 	.word	0x03d09000
 8002ac8:	003d0900 	.word	0x003d0900
 8002acc:	017d7840 	.word	0x017d7840
 8002ad0:	46000000 	.word	0x46000000
 8002ad4:	4c742400 	.word	0x4c742400
 8002ad8:	4a742400 	.word	0x4a742400
 8002adc:	4bbebc20 	.word	0x4bbebc20

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ae4:	b0ca      	sub	sp, #296	; 0x128
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002b04:	2500      	movs	r5, #0
 8002b06:	ea54 0305 	orrs.w	r3, r4, r5
 8002b0a:	d049      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b16:	d02f      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b1c:	d828      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b22:	d01a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b28:	d822      	bhi.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b32:	d007      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b34:	e01c      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b36:	4bb8      	ldr	r3, [pc, #736]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	4ab7      	ldr	r2, [pc, #732]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b42:	e01a      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b48:	3308      	adds	r3, #8
 8002b4a:	2102      	movs	r1, #2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 f9d1 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b58:	e00f      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b5e:	3328      	adds	r3, #40	; 0x28
 8002b60:	2102      	movs	r1, #2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f001 fa78 	bl	8004058 <RCCEx_PLL3_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b6e:	e004      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b76:	e000      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b82:	4ba5      	ldr	r3, [pc, #660]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b90:	4aa1      	ldr	r2, [pc, #644]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b92:	430b      	orrs	r3, r1
 8002b94:	6513      	str	r3, [r2, #80]	; 0x50
 8002b96:	e003      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002bac:	f04f 0900 	mov.w	r9, #0
 8002bb0:	ea58 0309 	orrs.w	r3, r8, r9
 8002bb4:	d047      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d82a      	bhi.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002bc0:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc6:	bf00      	nop
 8002bc8:	08002bdd 	.word	0x08002bdd
 8002bcc:	08002beb 	.word	0x08002beb
 8002bd0:	08002c01 	.word	0x08002c01
 8002bd4:	08002c1f 	.word	0x08002c1f
 8002bd8:	08002c1f 	.word	0x08002c1f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bdc:	4b8e      	ldr	r3, [pc, #568]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4a8d      	ldr	r2, [pc, #564]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002be8:	e01a      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bee:	3308      	adds	r3, #8
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f97e 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bfe:	e00f      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c04:	3328      	adds	r3, #40	; 0x28
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fa25 	bl	8004058 <RCCEx_PLL3_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c14:	e004      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c1c:	e000      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c28:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2c:	f023 0107 	bic.w	r1, r3, #7
 8002c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	4a78      	ldr	r2, [pc, #480]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6513      	str	r3, [r2, #80]	; 0x50
 8002c3c:	e003      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002c52:	f04f 0b00 	mov.w	fp, #0
 8002c56:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c5a:	d04c      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	d030      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6c:	d829      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c70:	d02d      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c72:	2bc0      	cmp	r3, #192	; 0xc0
 8002c74:	d825      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d018      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d821      	bhi.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c82:	2b40      	cmp	r3, #64	; 0x40
 8002c84:	d007      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c86:	e01c      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c88:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	4a62      	ldr	r2, [pc, #392]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002c94:	e01c      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c9a:	3308      	adds	r3, #8
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 f928 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002caa:	e011      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb0:	3328      	adds	r3, #40	; 0x28
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 f9cf 	bl	8004058 <RCCEx_PLL3_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cc8:	e002      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002cd8:	4b4f      	ldr	r3, [pc, #316]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	4a4c      	ldr	r2, [pc, #304]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6513      	str	r3, [r2, #80]	; 0x50
 8002cec:	e003      	b.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cf2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfe:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002d0c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002d10:	460b      	mov	r3, r1
 8002d12:	4313      	orrs	r3, r2
 8002d14:	d053      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d22:	d035      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d28:	d82e      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d2e:	d031      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002d34:	d828      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3a:	d01a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d40:	d822      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d4c:	e01c      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d4e:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d5a:	e01c      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d60:	3308      	adds	r3, #8
 8002d62:	2100      	movs	r1, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f001 f8c5 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d70:	e011      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d76:	3328      	adds	r3, #40	; 0x28
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f001 f96c 	bl	8004058 <RCCEx_PLL3_Config>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d86:	e006      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d8e:	e002      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10b      	bne.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dae:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db0:	430b      	orrs	r3, r1
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	e003      	b.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002dca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002dd4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	d056      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002de6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dea:	d038      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002dec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002df0:	d831      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002df6:	d034      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002df8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dfc:	d82b      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e02:	d01d      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e08:	d825      	bhi.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e12:	d00a      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e14:	e01f      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e16:	bf00      	nop
 8002e18:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e1c:	4ba2      	ldr	r3, [pc, #648]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4aa1      	ldr	r2, [pc, #644]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e28:	e01c      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e2e:	3308      	adds	r3, #8
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f85e 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e3e:	e011      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e44:	3328      	adds	r3, #40	; 0x28
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f905 	bl	8004058 <RCCEx_PLL3_Config>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e54:	e006      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e5c:	e002      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e64:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10b      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e6c:	4b8e      	ldr	r3, [pc, #568]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e7c:	4a8a      	ldr	r2, [pc, #552]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
 8002e82:	e003      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ea2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	d03a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	2b30      	cmp	r3, #48	; 0x30
 8002eb4:	d01f      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002eb6:	2b30      	cmp	r3, #48	; 0x30
 8002eb8:	d819      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d815      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ec6:	2b10      	cmp	r3, #16
 8002ec8:	d111      	bne.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eca:	4b77      	ldr	r3, [pc, #476]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	4a76      	ldr	r2, [pc, #472]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ed6:	e011      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002edc:	3308      	adds	r3, #8
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f001 f807 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002eec:	e006      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ef4:	e002      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002ef6:	bf00      	nop
 8002ef8:	e000      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002efa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002efc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f04:	4b68      	ldr	r3, [pc, #416]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f08:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f12:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f14:	430b      	orrs	r3, r1
 8002f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f18:	e003      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002f38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d051      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f4c:	d035      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f52:	d82e      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f58:	d031      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f5e:	d828      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f64:	d01a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f6a:	d822      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d007      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f76:	e01c      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f78:	4b4b      	ldr	r3, [pc, #300]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	4a4a      	ldr	r2, [pc, #296]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8a:	3308      	adds	r3, #8
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 ffb0 	bl	8003ef4 <RCCEx_PLL2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f9a:	e011      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fa0:	3328      	adds	r3, #40	; 0x28
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 f857 	bl	8004058 <RCCEx_PLL3_Config>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fb0:	e006      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002fb8:	e002      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fba:	bf00      	nop
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fc8:	4b37      	ldr	r3, [pc, #220]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd6:	4a34      	ldr	r2, [pc, #208]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6513      	str	r3, [r2, #80]	; 0x50
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ffc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003000:	460b      	mov	r3, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	d056      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800300a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003010:	d033      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003012:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003016:	d82c      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301c:	d02f      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800301e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003022:	d826      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003028:	d02b      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800302a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800302e:	d820      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003034:	d012      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800303a:	d81a      	bhi.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d022      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003044:	d115      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304a:	3308      	adds	r3, #8
 800304c:	2101      	movs	r1, #1
 800304e:	4618      	mov	r0, r3
 8003050:	f000 ff50 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800305a:	e015      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800305c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003060:	3328      	adds	r3, #40	; 0x28
 8003062:	2101      	movs	r1, #1
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fff7 	bl	8004058 <RCCEx_PLL3_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003070:	e00a      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003078:	e006      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800307a:	bf00      	nop
 800307c:	e004      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800307e:	bf00      	nop
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003082:	bf00      	nop
 8003084:	e000      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003086:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10d      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309e:	4a02      	ldr	r2, [pc, #8]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6513      	str	r3, [r2, #80]	; 0x50
 80030a4:	e006      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80030c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80030c4:	2300      	movs	r3, #0
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80030ca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4313      	orrs	r3, r2
 80030d2:	d055      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e0:	d033      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e6:	d82c      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ec:	d02f      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d826      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f8:	d02b      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80030fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030fe:	d820      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003104:	d012      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800310a:	d81a      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d022      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003114:	d115      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311a:	3308      	adds	r3, #8
 800311c:	2101      	movs	r1, #1
 800311e:	4618      	mov	r0, r3
 8003120:	f000 fee8 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800312a:	e015      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800312c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	2101      	movs	r1, #1
 8003134:	4618      	mov	r0, r3
 8003136:	f000 ff8f 	bl	8004058 <RCCEx_PLL3_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003140:	e00a      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003148:	e006      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800314a:	bf00      	nop
 800314c:	e004      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800314e:	bf00      	nop
 8003150:	e002      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003152:	bf00      	nop
 8003154:	e000      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003158:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10b      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003160:	4ba3      	ldr	r3, [pc, #652]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003170:	4a9f      	ldr	r2, [pc, #636]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003172:	430b      	orrs	r3, r1
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
 8003176:	e003      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800317c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800318c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d037      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031aa:	d00e      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80031ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b0:	d816      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d018      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ba:	d111      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031bc:	4b8c      	ldr	r3, [pc, #560]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	4a8b      	ldr	r2, [pc, #556]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031c8:	e00f      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031ce:	3308      	adds	r3, #8
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f000 fe8e 	bl	8003ef4 <RCCEx_PLL2_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10a      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80031f2:	4b7f      	ldr	r3, [pc, #508]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	4a7b      	ldr	r2, [pc, #492]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003202:	430b      	orrs	r3, r1
 8003204:	6513      	str	r3, [r2, #80]	; 0x50
 8003206:	e003      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003208:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800320c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800321c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003220:	2300      	movs	r3, #0
 8003222:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003226:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800322a:	460b      	mov	r3, r1
 800322c:	4313      	orrs	r3, r2
 800322e:	d039      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003236:	2b03      	cmp	r3, #3
 8003238:	d81c      	bhi.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800323a:	a201      	add	r2, pc, #4	; (adr r2, 8003240 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	0800327d 	.word	0x0800327d
 8003244:	08003251 	.word	0x08003251
 8003248:	0800325f 	.word	0x0800325f
 800324c:	0800327d 	.word	0x0800327d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b67      	ldr	r3, [pc, #412]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a66      	ldr	r2, [pc, #408]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800325c:	e00f      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800325e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003262:	3308      	adds	r3, #8
 8003264:	2102      	movs	r1, #2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fe44 	bl	8003ef4 <RCCEx_PLL2_Config>
 800326c:	4603      	mov	r3, r0
 800326e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003286:	4b5a      	ldr	r3, [pc, #360]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328a:	f023 0103 	bic.w	r1, r3, #3
 800328e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003294:	4a56      	ldr	r2, [pc, #344]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003296:	430b      	orrs	r3, r1
 8003298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329a:	e003      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80032b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80032ba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f000 809f 	beq.w	8003404 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032c6:	4b4b      	ldr	r3, [pc, #300]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a4a      	ldr	r2, [pc, #296]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032d2:	f7fd fc5d 	bl	8000b90 <HAL_GetTick>
 80032d6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032da:	e00b      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032dc:	f7fd fc58 	bl	8000b90 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	; 0x64
 80032ea:	d903      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032f2:	e005      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f4:	4b3f      	ldr	r3, [pc, #252]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ed      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003300:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003304:	2b00      	cmp	r3, #0
 8003306:	d179      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003308:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800330a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003314:	4053      	eors	r3, r2
 8003316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003326:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800332a:	4b31      	ldr	r3, [pc, #196]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003336:	4b2e      	ldr	r3, [pc, #184]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003342:	4a2b      	ldr	r2, [pc, #172]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800334e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003356:	d118      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fd fc1a 	bl	8000b90 <HAL_GetTick>
 800335c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003360:	e00d      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd fc15 	bl	8000b90 <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800336c:	1ad2      	subs	r2, r2, r3
 800336e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003372:	429a      	cmp	r2, r3
 8003374:	d903      	bls.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800337c:	e005      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800337e:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0eb      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800338a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800338e:	2b00      	cmp	r3, #0
 8003390:	d129      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003396:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800339a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033a2:	d10e      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80033a4:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80033ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033b4:	091a      	lsrs	r2, r3, #4
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033bc:	430b      	orrs	r3, r1
 80033be:	6113      	str	r3, [r2, #16]
 80033c0:	e005      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033cc:	6113      	str	r3, [r2, #16]
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80033d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6713      	str	r3, [r2, #112]	; 0x70
 80033e4:	e00e      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80033ee:	e009      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58024800 	.word	0x58024800
 80033f8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003400:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f002 0301 	and.w	r3, r2, #1
 8003410:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800341a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800341e:	460b      	mov	r3, r1
 8003420:	4313      	orrs	r3, r2
 8003422:	f000 8089 	beq.w	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800342a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800342c:	2b28      	cmp	r3, #40	; 0x28
 800342e:	d86b      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003430:	a201      	add	r2, pc, #4	; (adr r2, 8003438 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	08003511 	.word	0x08003511
 800343c:	08003509 	.word	0x08003509
 8003440:	08003509 	.word	0x08003509
 8003444:	08003509 	.word	0x08003509
 8003448:	08003509 	.word	0x08003509
 800344c:	08003509 	.word	0x08003509
 8003450:	08003509 	.word	0x08003509
 8003454:	08003509 	.word	0x08003509
 8003458:	080034dd 	.word	0x080034dd
 800345c:	08003509 	.word	0x08003509
 8003460:	08003509 	.word	0x08003509
 8003464:	08003509 	.word	0x08003509
 8003468:	08003509 	.word	0x08003509
 800346c:	08003509 	.word	0x08003509
 8003470:	08003509 	.word	0x08003509
 8003474:	08003509 	.word	0x08003509
 8003478:	080034f3 	.word	0x080034f3
 800347c:	08003509 	.word	0x08003509
 8003480:	08003509 	.word	0x08003509
 8003484:	08003509 	.word	0x08003509
 8003488:	08003509 	.word	0x08003509
 800348c:	08003509 	.word	0x08003509
 8003490:	08003509 	.word	0x08003509
 8003494:	08003509 	.word	0x08003509
 8003498:	08003511 	.word	0x08003511
 800349c:	08003509 	.word	0x08003509
 80034a0:	08003509 	.word	0x08003509
 80034a4:	08003509 	.word	0x08003509
 80034a8:	08003509 	.word	0x08003509
 80034ac:	08003509 	.word	0x08003509
 80034b0:	08003509 	.word	0x08003509
 80034b4:	08003509 	.word	0x08003509
 80034b8:	08003511 	.word	0x08003511
 80034bc:	08003509 	.word	0x08003509
 80034c0:	08003509 	.word	0x08003509
 80034c4:	08003509 	.word	0x08003509
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003509 	.word	0x08003509
 80034d0:	08003509 	.word	0x08003509
 80034d4:	08003509 	.word	0x08003509
 80034d8:	08003511 	.word	0x08003511
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e0:	3308      	adds	r3, #8
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fd05 	bl	8003ef4 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	3328      	adds	r3, #40	; 0x28
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fdac 	bl	8004058 <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800351a:	4bbf      	ldr	r3, [pc, #764]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003528:	4abb      	ldr	r2, [pc, #748]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6553      	str	r3, [r2, #84]	; 0x54
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f002 0302 	and.w	r3, r2, #2
 8003544:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003548:	2300      	movs	r3, #0
 800354a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800354e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003552:	460b      	mov	r3, r1
 8003554:	4313      	orrs	r3, r2
 8003556:	d041      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800355e:	2b05      	cmp	r3, #5
 8003560:	d824      	bhi.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	080035b5 	.word	0x080035b5
 800356c:	08003581 	.word	0x08003581
 8003570:	08003597 	.word	0x08003597
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035b5 	.word	0x080035b5
 800357c:	080035b5 	.word	0x080035b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003584:	3308      	adds	r3, #8
 8003586:	2101      	movs	r1, #1
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fcb3 	bl	8003ef4 <RCCEx_PLL2_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003594:	e00f      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359a:	3328      	adds	r3, #40	; 0x28
 800359c:	2101      	movs	r1, #1
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fd5a 	bl	8004058 <RCCEx_PLL3_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035aa:	e004      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035b2:	e000      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035be:	4b96      	ldr	r3, [pc, #600]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c2:	f023 0107 	bic.w	r1, r3, #7
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035cc:	4a92      	ldr	r2, [pc, #584]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6553      	str	r3, [r2, #84]	; 0x54
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 0304 	and.w	r3, r2, #4
 80035e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d044      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003604:	2b05      	cmp	r3, #5
 8003606:	d825      	bhi.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003608:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800360a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360e:	bf00      	nop
 8003610:	0800365d 	.word	0x0800365d
 8003614:	08003629 	.word	0x08003629
 8003618:	0800363f 	.word	0x0800363f
 800361c:	0800365d 	.word	0x0800365d
 8003620:	0800365d 	.word	0x0800365d
 8003624:	0800365d 	.word	0x0800365d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362c:	3308      	adds	r3, #8
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fc5f 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800363c:	e00f      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003642:	3328      	adds	r3, #40	; 0x28
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f000 fd06 	bl	8004058 <RCCEx_PLL3_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003652:	e004      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800365c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800365e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003666:	4b6c      	ldr	r3, [pc, #432]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	f023 0107 	bic.w	r1, r3, #7
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003676:	4a68      	ldr	r2, [pc, #416]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6593      	str	r3, [r2, #88]	; 0x58
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f002 0320 	and.w	r3, r2, #32
 8003692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800369c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a0:	460b      	mov	r3, r1
 80036a2:	4313      	orrs	r3, r2
 80036a4:	d055      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b2:	d033      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b8:	d82c      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036be:	d02f      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d826      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036ca:	d02b      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80036d0:	d820      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d6:	d012      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036dc:	d81a      	bhi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d022      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e6:	d115      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ec:	3308      	adds	r3, #8
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fbff 	bl	8003ef4 <RCCEx_PLL2_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80036fc:	e015      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003702:	3328      	adds	r3, #40	; 0x28
 8003704:	2102      	movs	r1, #2
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fca6 	bl	8004058 <RCCEx_PLL3_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003712:	e00a      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800371a:	e006      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800371c:	bf00      	nop
 800371e:	e004      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003720:	bf00      	nop
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003736:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a35      	ldr	r2, [pc, #212]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6553      	str	r3, [r2, #84]	; 0x54
 8003748:	e003      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800374e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800375e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003768:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d058      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800377a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800377e:	d033      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003780:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003784:	d82c      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378a:	d02f      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800378c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003790:	d826      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003792:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003796:	d02b      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003798:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800379c:	d820      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800379e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a2:	d012      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80037a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037a8:	d81a      	bhi.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d022      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b2:	d115      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b8:	3308      	adds	r3, #8
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fb99 	bl	8003ef4 <RCCEx_PLL2_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ce:	3328      	adds	r3, #40	; 0x28
 80037d0:	2102      	movs	r1, #2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fc40 	bl	8004058 <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037de:	e00a      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037e6:	e006      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037e8:	bf00      	nop
 80037ea:	e004      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037ec:	bf00      	nop
 80037ee:	e002      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10e      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800380a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800380e:	4a02      	ldr	r2, [pc, #8]	; (8003818 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003810:	430b      	orrs	r3, r1
 8003812:	6593      	str	r3, [r2, #88]	; 0x58
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800383a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d055      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003848:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800384c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003850:	d033      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003852:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003856:	d82c      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385c:	d02f      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003862:	d826      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003864:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003868:	d02b      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800386a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800386e:	d820      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003874:	d012      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800387a:	d81a      	bhi.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d022      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d115      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388a:	3308      	adds	r3, #8
 800388c:	2100      	movs	r1, #0
 800388e:	4618      	mov	r0, r3
 8003890:	f000 fb30 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800389a:	e015      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	3328      	adds	r3, #40	; 0x28
 80038a2:	2102      	movs	r1, #2
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fbd7 	bl	8004058 <RCCEx_PLL3_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038b0:	e00a      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ba:	bf00      	nop
 80038bc:	e004      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038be:	bf00      	nop
 80038c0:	e002      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038c2:	bf00      	nop
 80038c4:	e000      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038d0:	4ba1      	ldr	r3, [pc, #644]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038e0:	4a9d      	ldr	r2, [pc, #628]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038e2:	430b      	orrs	r3, r1
 80038e4:	6593      	str	r3, [r2, #88]	; 0x58
 80038e6:	e003      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f002 0308 	and.w	r3, r2, #8
 80038fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003900:	2300      	movs	r3, #0
 8003902:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003906:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	d01e      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d10c      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003922:	3328      	adds	r3, #40	; 0x28
 8003924:	2102      	movs	r1, #2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb96 	bl	8004058 <RCCEx_PLL3_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003938:	4b87      	ldr	r3, [pc, #540]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003948:	4a83      	ldr	r2, [pc, #524]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800394a:	430b      	orrs	r3, r1
 800394c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f002 0310 	and.w	r3, r2, #16
 800395a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800395e:	2300      	movs	r3, #0
 8003960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003964:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003968:	460b      	mov	r3, r1
 800396a:	4313      	orrs	r3, r2
 800396c:	d01e      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003976:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397a:	d10c      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800397c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003980:	3328      	adds	r3, #40	; 0x28
 8003982:	2102      	movs	r1, #2
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fb67 	bl	8004058 <RCCEx_PLL3_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003996:	4b70      	ldr	r3, [pc, #448]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a6:	4a6c      	ldr	r2, [pc, #432]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80039b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d03e      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d8:	d022      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039de:	d81b      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e8:	d00b      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039ea:	e015      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	3308      	adds	r3, #8
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 fa7d 	bl	8003ef4 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a00:	e00f      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a06:	3328      	adds	r3, #40	; 0x28
 8003a08:	2102      	movs	r1, #2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fb24 	bl	8004058 <RCCEx_PLL3_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a1e:	e000      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a2a:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a3a:	4a47      	ldr	r2, [pc, #284]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a40:	e003      	b.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a52:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003a56:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a58:	2300      	movs	r3, #0
 8003a5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a5c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003a60:	460b      	mov	r3, r1
 8003a62:	4313      	orrs	r3, r2
 8003a64:	d03b      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a72:	d01f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a78:	d818      	bhi.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a84:	d007      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a86:	e011      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a88:	4b33      	ldr	r3, [pc, #204]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a32      	ldr	r2, [pc, #200]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003a94:	e00f      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9a:	3328      	adds	r3, #40	; 0x28
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fada 	bl	8004058 <RCCEx_PLL3_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aaa:	e004      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10b      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003abe:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6553      	str	r3, [r2, #84]	; 0x54
 8003ad4:	e003      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ada:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003aea:	673b      	str	r3, [r7, #112]	; 0x70
 8003aec:	2300      	movs	r3, #0
 8003aee:	677b      	str	r3, [r7, #116]	; 0x74
 8003af0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003af4:	460b      	mov	r3, r1
 8003af6:	4313      	orrs	r3, r2
 8003af8:	d034      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d007      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0c:	4b12      	ldr	r3, [pc, #72]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b18:	e00e      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1e:	3308      	adds	r3, #8
 8003b20:	2102      	movs	r1, #2
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f9e6 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b2e:	e003      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10d      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	4a02      	ldr	r2, [pc, #8]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003b70:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b72:	2300      	movs	r3, #0
 8003b74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b76:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d00c      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	3328      	adds	r3, #40	; 0x28
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fa65 	bl	8004058 <RCCEx_PLL3_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba8:	2300      	movs	r3, #0
 8003baa:	667b      	str	r3, [r7, #100]	; 0x64
 8003bac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	d038      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc2:	d018      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc8:	d811      	bhi.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bce:	d014      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd4:	d80b      	bhi.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d011      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bde:	d106      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be0:	4bc3      	ldr	r3, [pc, #780]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	4ac2      	ldr	r2, [pc, #776]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bec:	e008      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bf4:	e004      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bf6:	bf00      	nop
 8003bf8:	e002      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c08:	4bb9      	ldr	r3, [pc, #740]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c18:	4ab5      	ldr	r2, [pc, #724]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003c34:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c36:	2300      	movs	r3, #0
 8003c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c3a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c44:	4baa      	ldr	r3, [pc, #680]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	4aa7      	ldr	r2, [pc, #668]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003c64:	653b      	str	r3, [r7, #80]	; 0x50
 8003c66:	2300      	movs	r3, #0
 8003c68:	657b      	str	r3, [r7, #84]	; 0x54
 8003c6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4313      	orrs	r3, r2
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c74:	4b9e      	ldr	r3, [pc, #632]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c84:	4a9a      	ldr	r2, [pc, #616]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	430b      	orrs	r3, r1
 8003c88:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c98:	2300      	movs	r3, #0
 8003c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ca6:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb4:	4a8e      	ldr	r2, [pc, #568]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ccc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	d00e      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cd6:	4b86      	ldr	r3, [pc, #536]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	4a85      	ldr	r2, [pc, #532]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cdc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ce0:	6113      	str	r3, [r2, #16]
 8003ce2:	4b83      	ldr	r3, [pc, #524]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ce4:	6919      	ldr	r1, [r3, #16]
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cee:	4a80      	ldr	r2, [pc, #512]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d02:	2300      	movs	r3, #0
 8003d04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d06:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d10:	4b77      	ldr	r3, [pc, #476]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d14:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	4a74      	ldr	r2, [pc, #464]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d20:	430b      	orrs	r3, r1
 8003d22:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003d30:	633b      	str	r3, [r7, #48]	; 0x30
 8003d32:	2300      	movs	r3, #0
 8003d34:	637b      	str	r3, [r7, #52]	; 0x34
 8003d36:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d40:	4b6b      	ldr	r3, [pc, #428]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	2100      	movs	r1, #0
 8003d60:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	d011      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d76:	3308      	adds	r3, #8
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f8ba 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	2100      	movs	r1, #0
 8003da0:	6239      	str	r1, [r7, #32]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d011      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	3308      	adds	r3, #8
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f89a 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	2100      	movs	r1, #0
 8003de0:	61b9      	str	r1, [r7, #24]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dec:	460b      	mov	r3, r1
 8003dee:	4313      	orrs	r3, r2
 8003df0:	d011      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df6:	3308      	adds	r3, #8
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f87a 	bl	8003ef4 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	2100      	movs	r1, #0
 8003e20:	6139      	str	r1, [r7, #16]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	d011      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e36:	3328      	adds	r3, #40	; 0x28
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f90c 	bl	8004058 <RCCEx_PLL3_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003e46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d011      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	3328      	adds	r3, #40	; 0x28
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f8ec 	bl	8004058 <RCCEx_PLL3_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	6039      	str	r1, [r7, #0]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003eac:	460b      	mov	r3, r1
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	d011      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eb6:	3328      	adds	r3, #40	; 0x28
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f8cc 	bl	8004058 <RCCEx_PLL3_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ed2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003ed6:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003eea:	46bd      	mov	sp, r7
 8003eec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef0:	58024400 	.word	0x58024400

08003ef4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f02:	4b53      	ldr	r3, [pc, #332]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d101      	bne.n	8003f12 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e099      	b.n	8004046 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f12:	4b4f      	ldr	r3, [pc, #316]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a4e      	ldr	r2, [pc, #312]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f1e:	f7fc fe37 	bl	8000b90 <HAL_GetTick>
 8003f22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f26:	f7fc fe33 	bl	8000b90 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e086      	b.n	8004046 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f38:	4b45      	ldr	r3, [pc, #276]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1f0      	bne.n	8003f26 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	031b      	lsls	r3, r3, #12
 8003f52:	493f      	ldr	r1, [pc, #252]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	628b      	str	r3, [r1, #40]	; 0x28
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	025b      	lsls	r3, r3, #9
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	431a      	orrs	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	041b      	lsls	r3, r3, #16
 8003f76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	061b      	lsls	r3, r3, #24
 8003f84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f88:	4931      	ldr	r1, [pc, #196]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	492d      	ldr	r1, [pc, #180]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	f023 0220 	bic.w	r2, r3, #32
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	4928      	ldr	r1, [pc, #160]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fb2:	4b27      	ldr	r3, [pc, #156]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	4a26      	ldr	r2, [pc, #152]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	f023 0310 	bic.w	r3, r3, #16
 8003fbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <RCCEx_PLL2_Config+0x160>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	69d2      	ldr	r2, [r2, #28]
 8003fca:	00d2      	lsls	r2, r2, #3
 8003fcc:	4920      	ldr	r1, [pc, #128]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fd2:	4b1f      	ldr	r3, [pc, #124]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fd8:	f043 0310 	orr.w	r3, r3, #16
 8003fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a19      	ldr	r2, [pc, #100]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003fea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ff0:	e00f      	b.n	8004012 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8003ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004004:	e005      	b.n	8004012 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4a11      	ldr	r2, [pc, #68]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 800400c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004010:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 8004018:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800401c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401e:	f7fc fdb7 	bl	8000b90 <HAL_GetTick>
 8004022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004024:	e008      	b.n	8004038 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004026:	f7fc fdb3 	bl	8000b90 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e006      	b.n	8004046 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <RCCEx_PLL2_Config+0x15c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004044:	7bfb      	ldrb	r3, [r7, #15]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
 8004054:	ffff0007 	.word	0xffff0007

08004058 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004066:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	2b03      	cmp	r3, #3
 8004070:	d101      	bne.n	8004076 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e099      	b.n	80041aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004076:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a4e      	ldr	r2, [pc, #312]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800407c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004082:	f7fc fd85 	bl	8000b90 <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004088:	e008      	b.n	800409c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800408a:	f7fc fd81 	bl	8000b90 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e086      	b.n	80041aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800409c:	4b45      	ldr	r3, [pc, #276]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1f0      	bne.n	800408a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	051b      	lsls	r3, r3, #20
 80040b6:	493f      	ldr	r1, [pc, #252]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	628b      	str	r3, [r1, #40]	; 0x28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	041b      	lsls	r3, r3, #16
 80040da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	061b      	lsls	r3, r3, #24
 80040e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040ec:	4931      	ldr	r1, [pc, #196]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040f2:	4b30      	ldr	r3, [pc, #192]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	492d      	ldr	r1, [pc, #180]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	4928      	ldr	r1, [pc, #160]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004116:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	4a26      	ldr	r2, [pc, #152]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004122:	4b24      	ldr	r3, [pc, #144]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <RCCEx_PLL3_Config+0x160>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	69d2      	ldr	r2, [r2, #28]
 800412e:	00d2      	lsls	r2, r2, #3
 8004130:	4920      	ldr	r1, [pc, #128]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004136:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800413c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004140:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a19      	ldr	r2, [pc, #100]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800414e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004154:	e00f      	b.n	8004176 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d106      	bne.n	800416a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004162:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004166:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004168:	e005      	b.n	8004176 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	4a11      	ldr	r2, [pc, #68]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004174:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004176:	4b0f      	ldr	r3, [pc, #60]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a0e      	ldr	r2, [pc, #56]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800417c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004182:	f7fc fd05 	bl	8000b90 <HAL_GetTick>
 8004186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004188:	e008      	b.n	800419c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800418a:	f7fc fd01 	bl	8000b90 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e006      	b.n	80041aa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <RCCEx_PLL3_Config+0x15c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0f0      	beq.n	800418a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	58024400 	.word	0x58024400
 80041b8:	ffff0007 	.word	0xffff0007

080041bc <__errno>:
 80041bc:	4b01      	ldr	r3, [pc, #4]	; (80041c4 <__errno+0x8>)
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	24000014 	.word	0x24000014

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4d0d      	ldr	r5, [pc, #52]	; (8004200 <__libc_init_array+0x38>)
 80041cc:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <__libc_init_array+0x3c>)
 80041ce:	1b64      	subs	r4, r4, r5
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	2600      	movs	r6, #0
 80041d4:	42a6      	cmp	r6, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	4d0b      	ldr	r5, [pc, #44]	; (8004208 <__libc_init_array+0x40>)
 80041da:	4c0c      	ldr	r4, [pc, #48]	; (800420c <__libc_init_array+0x44>)
 80041dc:	f000 fc8e 	bl	8004afc <_init>
 80041e0:	1b64      	subs	r4, r4, r5
 80041e2:	10a4      	asrs	r4, r4, #2
 80041e4:	2600      	movs	r6, #0
 80041e6:	42a6      	cmp	r6, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f0:	4798      	blx	r3
 80041f2:	3601      	adds	r6, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041fa:	4798      	blx	r3
 80041fc:	3601      	adds	r6, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08004bc0 	.word	0x08004bc0
 8004204:	08004bc0 	.word	0x08004bc0
 8004208:	08004bc0 	.word	0x08004bc0
 800420c:	08004bc4 	.word	0x08004bc4

08004210 <memcpy>:
 8004210:	440a      	add	r2, r1
 8004212:	4291      	cmp	r1, r2
 8004214:	f100 33ff 	add.w	r3, r0, #4294967295
 8004218:	d100      	bne.n	800421c <memcpy+0xc>
 800421a:	4770      	bx	lr
 800421c:	b510      	push	{r4, lr}
 800421e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004222:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004226:	4291      	cmp	r1, r2
 8004228:	d1f9      	bne.n	800421e <memcpy+0xe>
 800422a:	bd10      	pop	{r4, pc}

0800422c <memset>:
 800422c:	4402      	add	r2, r0
 800422e:	4603      	mov	r3, r0
 8004230:	4293      	cmp	r3, r2
 8004232:	d100      	bne.n	8004236 <memset+0xa>
 8004234:	4770      	bx	lr
 8004236:	f803 1b01 	strb.w	r1, [r3], #1
 800423a:	e7f9      	b.n	8004230 <memset+0x4>

0800423c <siprintf>:
 800423c:	b40e      	push	{r1, r2, r3}
 800423e:	b500      	push	{lr}
 8004240:	b09c      	sub	sp, #112	; 0x70
 8004242:	ab1d      	add	r3, sp, #116	; 0x74
 8004244:	9002      	str	r0, [sp, #8]
 8004246:	9006      	str	r0, [sp, #24]
 8004248:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800424c:	4809      	ldr	r0, [pc, #36]	; (8004274 <siprintf+0x38>)
 800424e:	9107      	str	r1, [sp, #28]
 8004250:	9104      	str	r1, [sp, #16]
 8004252:	4909      	ldr	r1, [pc, #36]	; (8004278 <siprintf+0x3c>)
 8004254:	f853 2b04 	ldr.w	r2, [r3], #4
 8004258:	9105      	str	r1, [sp, #20]
 800425a:	6800      	ldr	r0, [r0, #0]
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	a902      	add	r1, sp, #8
 8004260:	f000 f868 	bl	8004334 <_svfiprintf_r>
 8004264:	9b02      	ldr	r3, [sp, #8]
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	b01c      	add	sp, #112	; 0x70
 800426c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004270:	b003      	add	sp, #12
 8004272:	4770      	bx	lr
 8004274:	24000014 	.word	0x24000014
 8004278:	ffff0208 	.word	0xffff0208

0800427c <__ssputs_r>:
 800427c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004280:	688e      	ldr	r6, [r1, #8]
 8004282:	429e      	cmp	r6, r3
 8004284:	4682      	mov	sl, r0
 8004286:	460c      	mov	r4, r1
 8004288:	4690      	mov	r8, r2
 800428a:	461f      	mov	r7, r3
 800428c:	d838      	bhi.n	8004300 <__ssputs_r+0x84>
 800428e:	898a      	ldrh	r2, [r1, #12]
 8004290:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004294:	d032      	beq.n	80042fc <__ssputs_r+0x80>
 8004296:	6825      	ldr	r5, [r4, #0]
 8004298:	6909      	ldr	r1, [r1, #16]
 800429a:	eba5 0901 	sub.w	r9, r5, r1
 800429e:	6965      	ldr	r5, [r4, #20]
 80042a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042a8:	3301      	adds	r3, #1
 80042aa:	444b      	add	r3, r9
 80042ac:	106d      	asrs	r5, r5, #1
 80042ae:	429d      	cmp	r5, r3
 80042b0:	bf38      	it	cc
 80042b2:	461d      	movcc	r5, r3
 80042b4:	0553      	lsls	r3, r2, #21
 80042b6:	d531      	bpl.n	800431c <__ssputs_r+0xa0>
 80042b8:	4629      	mov	r1, r5
 80042ba:	f000 fb55 	bl	8004968 <_malloc_r>
 80042be:	4606      	mov	r6, r0
 80042c0:	b950      	cbnz	r0, 80042d8 <__ssputs_r+0x5c>
 80042c2:	230c      	movs	r3, #12
 80042c4:	f8ca 3000 	str.w	r3, [sl]
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ce:	81a3      	strh	r3, [r4, #12]
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295
 80042d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d8:	6921      	ldr	r1, [r4, #16]
 80042da:	464a      	mov	r2, r9
 80042dc:	f7ff ff98 	bl	8004210 <memcpy>
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ea:	81a3      	strh	r3, [r4, #12]
 80042ec:	6126      	str	r6, [r4, #16]
 80042ee:	6165      	str	r5, [r4, #20]
 80042f0:	444e      	add	r6, r9
 80042f2:	eba5 0509 	sub.w	r5, r5, r9
 80042f6:	6026      	str	r6, [r4, #0]
 80042f8:	60a5      	str	r5, [r4, #8]
 80042fa:	463e      	mov	r6, r7
 80042fc:	42be      	cmp	r6, r7
 80042fe:	d900      	bls.n	8004302 <__ssputs_r+0x86>
 8004300:	463e      	mov	r6, r7
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	4632      	mov	r2, r6
 8004306:	4641      	mov	r1, r8
 8004308:	f000 faa8 	bl	800485c <memmove>
 800430c:	68a3      	ldr	r3, [r4, #8]
 800430e:	1b9b      	subs	r3, r3, r6
 8004310:	60a3      	str	r3, [r4, #8]
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	4433      	add	r3, r6
 8004316:	6023      	str	r3, [r4, #0]
 8004318:	2000      	movs	r0, #0
 800431a:	e7db      	b.n	80042d4 <__ssputs_r+0x58>
 800431c:	462a      	mov	r2, r5
 800431e:	f000 fb97 	bl	8004a50 <_realloc_r>
 8004322:	4606      	mov	r6, r0
 8004324:	2800      	cmp	r0, #0
 8004326:	d1e1      	bne.n	80042ec <__ssputs_r+0x70>
 8004328:	6921      	ldr	r1, [r4, #16]
 800432a:	4650      	mov	r0, sl
 800432c:	f000 fab0 	bl	8004890 <_free_r>
 8004330:	e7c7      	b.n	80042c2 <__ssputs_r+0x46>
	...

08004334 <_svfiprintf_r>:
 8004334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	4698      	mov	r8, r3
 800433a:	898b      	ldrh	r3, [r1, #12]
 800433c:	061b      	lsls	r3, r3, #24
 800433e:	b09d      	sub	sp, #116	; 0x74
 8004340:	4607      	mov	r7, r0
 8004342:	460d      	mov	r5, r1
 8004344:	4614      	mov	r4, r2
 8004346:	d50e      	bpl.n	8004366 <_svfiprintf_r+0x32>
 8004348:	690b      	ldr	r3, [r1, #16]
 800434a:	b963      	cbnz	r3, 8004366 <_svfiprintf_r+0x32>
 800434c:	2140      	movs	r1, #64	; 0x40
 800434e:	f000 fb0b 	bl	8004968 <_malloc_r>
 8004352:	6028      	str	r0, [r5, #0]
 8004354:	6128      	str	r0, [r5, #16]
 8004356:	b920      	cbnz	r0, 8004362 <_svfiprintf_r+0x2e>
 8004358:	230c      	movs	r3, #12
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	f04f 30ff 	mov.w	r0, #4294967295
 8004360:	e0d1      	b.n	8004506 <_svfiprintf_r+0x1d2>
 8004362:	2340      	movs	r3, #64	; 0x40
 8004364:	616b      	str	r3, [r5, #20]
 8004366:	2300      	movs	r3, #0
 8004368:	9309      	str	r3, [sp, #36]	; 0x24
 800436a:	2320      	movs	r3, #32
 800436c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004370:	f8cd 800c 	str.w	r8, [sp, #12]
 8004374:	2330      	movs	r3, #48	; 0x30
 8004376:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004520 <_svfiprintf_r+0x1ec>
 800437a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800437e:	f04f 0901 	mov.w	r9, #1
 8004382:	4623      	mov	r3, r4
 8004384:	469a      	mov	sl, r3
 8004386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800438a:	b10a      	cbz	r2, 8004390 <_svfiprintf_r+0x5c>
 800438c:	2a25      	cmp	r2, #37	; 0x25
 800438e:	d1f9      	bne.n	8004384 <_svfiprintf_r+0x50>
 8004390:	ebba 0b04 	subs.w	fp, sl, r4
 8004394:	d00b      	beq.n	80043ae <_svfiprintf_r+0x7a>
 8004396:	465b      	mov	r3, fp
 8004398:	4622      	mov	r2, r4
 800439a:	4629      	mov	r1, r5
 800439c:	4638      	mov	r0, r7
 800439e:	f7ff ff6d 	bl	800427c <__ssputs_r>
 80043a2:	3001      	adds	r0, #1
 80043a4:	f000 80aa 	beq.w	80044fc <_svfiprintf_r+0x1c8>
 80043a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043aa:	445a      	add	r2, fp
 80043ac:	9209      	str	r2, [sp, #36]	; 0x24
 80043ae:	f89a 3000 	ldrb.w	r3, [sl]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80a2 	beq.w	80044fc <_svfiprintf_r+0x1c8>
 80043b8:	2300      	movs	r3, #0
 80043ba:	f04f 32ff 	mov.w	r2, #4294967295
 80043be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043c2:	f10a 0a01 	add.w	sl, sl, #1
 80043c6:	9304      	str	r3, [sp, #16]
 80043c8:	9307      	str	r3, [sp, #28]
 80043ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ce:	931a      	str	r3, [sp, #104]	; 0x68
 80043d0:	4654      	mov	r4, sl
 80043d2:	2205      	movs	r2, #5
 80043d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043d8:	4851      	ldr	r0, [pc, #324]	; (8004520 <_svfiprintf_r+0x1ec>)
 80043da:	f7fb ff81 	bl	80002e0 <memchr>
 80043de:	9a04      	ldr	r2, [sp, #16]
 80043e0:	b9d8      	cbnz	r0, 800441a <_svfiprintf_r+0xe6>
 80043e2:	06d0      	lsls	r0, r2, #27
 80043e4:	bf44      	itt	mi
 80043e6:	2320      	movmi	r3, #32
 80043e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043ec:	0711      	lsls	r1, r2, #28
 80043ee:	bf44      	itt	mi
 80043f0:	232b      	movmi	r3, #43	; 0x2b
 80043f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043f6:	f89a 3000 	ldrb.w	r3, [sl]
 80043fa:	2b2a      	cmp	r3, #42	; 0x2a
 80043fc:	d015      	beq.n	800442a <_svfiprintf_r+0xf6>
 80043fe:	9a07      	ldr	r2, [sp, #28]
 8004400:	4654      	mov	r4, sl
 8004402:	2000      	movs	r0, #0
 8004404:	f04f 0c0a 	mov.w	ip, #10
 8004408:	4621      	mov	r1, r4
 800440a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800440e:	3b30      	subs	r3, #48	; 0x30
 8004410:	2b09      	cmp	r3, #9
 8004412:	d94e      	bls.n	80044b2 <_svfiprintf_r+0x17e>
 8004414:	b1b0      	cbz	r0, 8004444 <_svfiprintf_r+0x110>
 8004416:	9207      	str	r2, [sp, #28]
 8004418:	e014      	b.n	8004444 <_svfiprintf_r+0x110>
 800441a:	eba0 0308 	sub.w	r3, r0, r8
 800441e:	fa09 f303 	lsl.w	r3, r9, r3
 8004422:	4313      	orrs	r3, r2
 8004424:	9304      	str	r3, [sp, #16]
 8004426:	46a2      	mov	sl, r4
 8004428:	e7d2      	b.n	80043d0 <_svfiprintf_r+0x9c>
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	1d19      	adds	r1, r3, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	9103      	str	r1, [sp, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	bfbb      	ittet	lt
 8004436:	425b      	neglt	r3, r3
 8004438:	f042 0202 	orrlt.w	r2, r2, #2
 800443c:	9307      	strge	r3, [sp, #28]
 800443e:	9307      	strlt	r3, [sp, #28]
 8004440:	bfb8      	it	lt
 8004442:	9204      	strlt	r2, [sp, #16]
 8004444:	7823      	ldrb	r3, [r4, #0]
 8004446:	2b2e      	cmp	r3, #46	; 0x2e
 8004448:	d10c      	bne.n	8004464 <_svfiprintf_r+0x130>
 800444a:	7863      	ldrb	r3, [r4, #1]
 800444c:	2b2a      	cmp	r3, #42	; 0x2a
 800444e:	d135      	bne.n	80044bc <_svfiprintf_r+0x188>
 8004450:	9b03      	ldr	r3, [sp, #12]
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	9203      	str	r2, [sp, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	bfb8      	it	lt
 800445c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004460:	3402      	adds	r4, #2
 8004462:	9305      	str	r3, [sp, #20]
 8004464:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004530 <_svfiprintf_r+0x1fc>
 8004468:	7821      	ldrb	r1, [r4, #0]
 800446a:	2203      	movs	r2, #3
 800446c:	4650      	mov	r0, sl
 800446e:	f7fb ff37 	bl	80002e0 <memchr>
 8004472:	b140      	cbz	r0, 8004486 <_svfiprintf_r+0x152>
 8004474:	2340      	movs	r3, #64	; 0x40
 8004476:	eba0 000a 	sub.w	r0, r0, sl
 800447a:	fa03 f000 	lsl.w	r0, r3, r0
 800447e:	9b04      	ldr	r3, [sp, #16]
 8004480:	4303      	orrs	r3, r0
 8004482:	3401      	adds	r4, #1
 8004484:	9304      	str	r3, [sp, #16]
 8004486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800448a:	4826      	ldr	r0, [pc, #152]	; (8004524 <_svfiprintf_r+0x1f0>)
 800448c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004490:	2206      	movs	r2, #6
 8004492:	f7fb ff25 	bl	80002e0 <memchr>
 8004496:	2800      	cmp	r0, #0
 8004498:	d038      	beq.n	800450c <_svfiprintf_r+0x1d8>
 800449a:	4b23      	ldr	r3, [pc, #140]	; (8004528 <_svfiprintf_r+0x1f4>)
 800449c:	bb1b      	cbnz	r3, 80044e6 <_svfiprintf_r+0x1b2>
 800449e:	9b03      	ldr	r3, [sp, #12]
 80044a0:	3307      	adds	r3, #7
 80044a2:	f023 0307 	bic.w	r3, r3, #7
 80044a6:	3308      	adds	r3, #8
 80044a8:	9303      	str	r3, [sp, #12]
 80044aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ac:	4433      	add	r3, r6
 80044ae:	9309      	str	r3, [sp, #36]	; 0x24
 80044b0:	e767      	b.n	8004382 <_svfiprintf_r+0x4e>
 80044b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80044b6:	460c      	mov	r4, r1
 80044b8:	2001      	movs	r0, #1
 80044ba:	e7a5      	b.n	8004408 <_svfiprintf_r+0xd4>
 80044bc:	2300      	movs	r3, #0
 80044be:	3401      	adds	r4, #1
 80044c0:	9305      	str	r3, [sp, #20]
 80044c2:	4619      	mov	r1, r3
 80044c4:	f04f 0c0a 	mov.w	ip, #10
 80044c8:	4620      	mov	r0, r4
 80044ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ce:	3a30      	subs	r2, #48	; 0x30
 80044d0:	2a09      	cmp	r2, #9
 80044d2:	d903      	bls.n	80044dc <_svfiprintf_r+0x1a8>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0c5      	beq.n	8004464 <_svfiprintf_r+0x130>
 80044d8:	9105      	str	r1, [sp, #20]
 80044da:	e7c3      	b.n	8004464 <_svfiprintf_r+0x130>
 80044dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80044e0:	4604      	mov	r4, r0
 80044e2:	2301      	movs	r3, #1
 80044e4:	e7f0      	b.n	80044c8 <_svfiprintf_r+0x194>
 80044e6:	ab03      	add	r3, sp, #12
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	462a      	mov	r2, r5
 80044ec:	4b0f      	ldr	r3, [pc, #60]	; (800452c <_svfiprintf_r+0x1f8>)
 80044ee:	a904      	add	r1, sp, #16
 80044f0:	4638      	mov	r0, r7
 80044f2:	f3af 8000 	nop.w
 80044f6:	1c42      	adds	r2, r0, #1
 80044f8:	4606      	mov	r6, r0
 80044fa:	d1d6      	bne.n	80044aa <_svfiprintf_r+0x176>
 80044fc:	89ab      	ldrh	r3, [r5, #12]
 80044fe:	065b      	lsls	r3, r3, #25
 8004500:	f53f af2c 	bmi.w	800435c <_svfiprintf_r+0x28>
 8004504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004506:	b01d      	add	sp, #116	; 0x74
 8004508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800450c:	ab03      	add	r3, sp, #12
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	462a      	mov	r2, r5
 8004512:	4b06      	ldr	r3, [pc, #24]	; (800452c <_svfiprintf_r+0x1f8>)
 8004514:	a904      	add	r1, sp, #16
 8004516:	4638      	mov	r0, r7
 8004518:	f000 f87a 	bl	8004610 <_printf_i>
 800451c:	e7eb      	b.n	80044f6 <_svfiprintf_r+0x1c2>
 800451e:	bf00      	nop
 8004520:	08004b8c 	.word	0x08004b8c
 8004524:	08004b96 	.word	0x08004b96
 8004528:	00000000 	.word	0x00000000
 800452c:	0800427d 	.word	0x0800427d
 8004530:	08004b92 	.word	0x08004b92

08004534 <_printf_common>:
 8004534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004538:	4616      	mov	r6, r2
 800453a:	4699      	mov	r9, r3
 800453c:	688a      	ldr	r2, [r1, #8]
 800453e:	690b      	ldr	r3, [r1, #16]
 8004540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004544:	4293      	cmp	r3, r2
 8004546:	bfb8      	it	lt
 8004548:	4613      	movlt	r3, r2
 800454a:	6033      	str	r3, [r6, #0]
 800454c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004550:	4607      	mov	r7, r0
 8004552:	460c      	mov	r4, r1
 8004554:	b10a      	cbz	r2, 800455a <_printf_common+0x26>
 8004556:	3301      	adds	r3, #1
 8004558:	6033      	str	r3, [r6, #0]
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	0699      	lsls	r1, r3, #26
 800455e:	bf42      	ittt	mi
 8004560:	6833      	ldrmi	r3, [r6, #0]
 8004562:	3302      	addmi	r3, #2
 8004564:	6033      	strmi	r3, [r6, #0]
 8004566:	6825      	ldr	r5, [r4, #0]
 8004568:	f015 0506 	ands.w	r5, r5, #6
 800456c:	d106      	bne.n	800457c <_printf_common+0x48>
 800456e:	f104 0a19 	add.w	sl, r4, #25
 8004572:	68e3      	ldr	r3, [r4, #12]
 8004574:	6832      	ldr	r2, [r6, #0]
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	42ab      	cmp	r3, r5
 800457a:	dc26      	bgt.n	80045ca <_printf_common+0x96>
 800457c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004580:	1e13      	subs	r3, r2, #0
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	bf18      	it	ne
 8004586:	2301      	movne	r3, #1
 8004588:	0692      	lsls	r2, r2, #26
 800458a:	d42b      	bmi.n	80045e4 <_printf_common+0xb0>
 800458c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004590:	4649      	mov	r1, r9
 8004592:	4638      	mov	r0, r7
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d01e      	beq.n	80045d8 <_printf_common+0xa4>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	68e5      	ldr	r5, [r4, #12]
 800459e:	6832      	ldr	r2, [r6, #0]
 80045a0:	f003 0306 	and.w	r3, r3, #6
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	bf08      	it	eq
 80045a8:	1aad      	subeq	r5, r5, r2
 80045aa:	68a3      	ldr	r3, [r4, #8]
 80045ac:	6922      	ldr	r2, [r4, #16]
 80045ae:	bf0c      	ite	eq
 80045b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045b4:	2500      	movne	r5, #0
 80045b6:	4293      	cmp	r3, r2
 80045b8:	bfc4      	itt	gt
 80045ba:	1a9b      	subgt	r3, r3, r2
 80045bc:	18ed      	addgt	r5, r5, r3
 80045be:	2600      	movs	r6, #0
 80045c0:	341a      	adds	r4, #26
 80045c2:	42b5      	cmp	r5, r6
 80045c4:	d11a      	bne.n	80045fc <_printf_common+0xc8>
 80045c6:	2000      	movs	r0, #0
 80045c8:	e008      	b.n	80045dc <_printf_common+0xa8>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4652      	mov	r2, sl
 80045ce:	4649      	mov	r1, r9
 80045d0:	4638      	mov	r0, r7
 80045d2:	47c0      	blx	r8
 80045d4:	3001      	adds	r0, #1
 80045d6:	d103      	bne.n	80045e0 <_printf_common+0xac>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295
 80045dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e0:	3501      	adds	r5, #1
 80045e2:	e7c6      	b.n	8004572 <_printf_common+0x3e>
 80045e4:	18e1      	adds	r1, r4, r3
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	2030      	movs	r0, #48	; 0x30
 80045ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045ee:	4422      	add	r2, r4
 80045f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045f8:	3302      	adds	r3, #2
 80045fa:	e7c7      	b.n	800458c <_printf_common+0x58>
 80045fc:	2301      	movs	r3, #1
 80045fe:	4622      	mov	r2, r4
 8004600:	4649      	mov	r1, r9
 8004602:	4638      	mov	r0, r7
 8004604:	47c0      	blx	r8
 8004606:	3001      	adds	r0, #1
 8004608:	d0e6      	beq.n	80045d8 <_printf_common+0xa4>
 800460a:	3601      	adds	r6, #1
 800460c:	e7d9      	b.n	80045c2 <_printf_common+0x8e>
	...

08004610 <_printf_i>:
 8004610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004614:	7e0f      	ldrb	r7, [r1, #24]
 8004616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004618:	2f78      	cmp	r7, #120	; 0x78
 800461a:	4691      	mov	r9, r2
 800461c:	4680      	mov	r8, r0
 800461e:	460c      	mov	r4, r1
 8004620:	469a      	mov	sl, r3
 8004622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004626:	d807      	bhi.n	8004638 <_printf_i+0x28>
 8004628:	2f62      	cmp	r7, #98	; 0x62
 800462a:	d80a      	bhi.n	8004642 <_printf_i+0x32>
 800462c:	2f00      	cmp	r7, #0
 800462e:	f000 80d8 	beq.w	80047e2 <_printf_i+0x1d2>
 8004632:	2f58      	cmp	r7, #88	; 0x58
 8004634:	f000 80a3 	beq.w	800477e <_printf_i+0x16e>
 8004638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800463c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004640:	e03a      	b.n	80046b8 <_printf_i+0xa8>
 8004642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004646:	2b15      	cmp	r3, #21
 8004648:	d8f6      	bhi.n	8004638 <_printf_i+0x28>
 800464a:	a101      	add	r1, pc, #4	; (adr r1, 8004650 <_printf_i+0x40>)
 800464c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004650:	080046a9 	.word	0x080046a9
 8004654:	080046bd 	.word	0x080046bd
 8004658:	08004639 	.word	0x08004639
 800465c:	08004639 	.word	0x08004639
 8004660:	08004639 	.word	0x08004639
 8004664:	08004639 	.word	0x08004639
 8004668:	080046bd 	.word	0x080046bd
 800466c:	08004639 	.word	0x08004639
 8004670:	08004639 	.word	0x08004639
 8004674:	08004639 	.word	0x08004639
 8004678:	08004639 	.word	0x08004639
 800467c:	080047c9 	.word	0x080047c9
 8004680:	080046ed 	.word	0x080046ed
 8004684:	080047ab 	.word	0x080047ab
 8004688:	08004639 	.word	0x08004639
 800468c:	08004639 	.word	0x08004639
 8004690:	080047eb 	.word	0x080047eb
 8004694:	08004639 	.word	0x08004639
 8004698:	080046ed 	.word	0x080046ed
 800469c:	08004639 	.word	0x08004639
 80046a0:	08004639 	.word	0x08004639
 80046a4:	080047b3 	.word	0x080047b3
 80046a8:	682b      	ldr	r3, [r5, #0]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	602a      	str	r2, [r5, #0]
 80046b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0a3      	b.n	8004804 <_printf_i+0x1f4>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	6829      	ldr	r1, [r5, #0]
 80046c0:	0606      	lsls	r6, r0, #24
 80046c2:	f101 0304 	add.w	r3, r1, #4
 80046c6:	d50a      	bpl.n	80046de <_printf_i+0xce>
 80046c8:	680e      	ldr	r6, [r1, #0]
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	2e00      	cmp	r6, #0
 80046ce:	da03      	bge.n	80046d8 <_printf_i+0xc8>
 80046d0:	232d      	movs	r3, #45	; 0x2d
 80046d2:	4276      	negs	r6, r6
 80046d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046d8:	485e      	ldr	r0, [pc, #376]	; (8004854 <_printf_i+0x244>)
 80046da:	230a      	movs	r3, #10
 80046dc:	e019      	b.n	8004712 <_printf_i+0x102>
 80046de:	680e      	ldr	r6, [r1, #0]
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80046e6:	bf18      	it	ne
 80046e8:	b236      	sxthne	r6, r6
 80046ea:	e7ef      	b.n	80046cc <_printf_i+0xbc>
 80046ec:	682b      	ldr	r3, [r5, #0]
 80046ee:	6820      	ldr	r0, [r4, #0]
 80046f0:	1d19      	adds	r1, r3, #4
 80046f2:	6029      	str	r1, [r5, #0]
 80046f4:	0601      	lsls	r1, r0, #24
 80046f6:	d501      	bpl.n	80046fc <_printf_i+0xec>
 80046f8:	681e      	ldr	r6, [r3, #0]
 80046fa:	e002      	b.n	8004702 <_printf_i+0xf2>
 80046fc:	0646      	lsls	r6, r0, #25
 80046fe:	d5fb      	bpl.n	80046f8 <_printf_i+0xe8>
 8004700:	881e      	ldrh	r6, [r3, #0]
 8004702:	4854      	ldr	r0, [pc, #336]	; (8004854 <_printf_i+0x244>)
 8004704:	2f6f      	cmp	r7, #111	; 0x6f
 8004706:	bf0c      	ite	eq
 8004708:	2308      	moveq	r3, #8
 800470a:	230a      	movne	r3, #10
 800470c:	2100      	movs	r1, #0
 800470e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004712:	6865      	ldr	r5, [r4, #4]
 8004714:	60a5      	str	r5, [r4, #8]
 8004716:	2d00      	cmp	r5, #0
 8004718:	bfa2      	ittt	ge
 800471a:	6821      	ldrge	r1, [r4, #0]
 800471c:	f021 0104 	bicge.w	r1, r1, #4
 8004720:	6021      	strge	r1, [r4, #0]
 8004722:	b90e      	cbnz	r6, 8004728 <_printf_i+0x118>
 8004724:	2d00      	cmp	r5, #0
 8004726:	d04d      	beq.n	80047c4 <_printf_i+0x1b4>
 8004728:	4615      	mov	r5, r2
 800472a:	fbb6 f1f3 	udiv	r1, r6, r3
 800472e:	fb03 6711 	mls	r7, r3, r1, r6
 8004732:	5dc7      	ldrb	r7, [r0, r7]
 8004734:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004738:	4637      	mov	r7, r6
 800473a:	42bb      	cmp	r3, r7
 800473c:	460e      	mov	r6, r1
 800473e:	d9f4      	bls.n	800472a <_printf_i+0x11a>
 8004740:	2b08      	cmp	r3, #8
 8004742:	d10b      	bne.n	800475c <_printf_i+0x14c>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	07de      	lsls	r6, r3, #31
 8004748:	d508      	bpl.n	800475c <_printf_i+0x14c>
 800474a:	6923      	ldr	r3, [r4, #16]
 800474c:	6861      	ldr	r1, [r4, #4]
 800474e:	4299      	cmp	r1, r3
 8004750:	bfde      	ittt	le
 8004752:	2330      	movle	r3, #48	; 0x30
 8004754:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004758:	f105 35ff 	addle.w	r5, r5, #4294967295
 800475c:	1b52      	subs	r2, r2, r5
 800475e:	6122      	str	r2, [r4, #16]
 8004760:	f8cd a000 	str.w	sl, [sp]
 8004764:	464b      	mov	r3, r9
 8004766:	aa03      	add	r2, sp, #12
 8004768:	4621      	mov	r1, r4
 800476a:	4640      	mov	r0, r8
 800476c:	f7ff fee2 	bl	8004534 <_printf_common>
 8004770:	3001      	adds	r0, #1
 8004772:	d14c      	bne.n	800480e <_printf_i+0x1fe>
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	b004      	add	sp, #16
 800477a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800477e:	4835      	ldr	r0, [pc, #212]	; (8004854 <_printf_i+0x244>)
 8004780:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004784:	6829      	ldr	r1, [r5, #0]
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	f851 6b04 	ldr.w	r6, [r1], #4
 800478c:	6029      	str	r1, [r5, #0]
 800478e:	061d      	lsls	r5, r3, #24
 8004790:	d514      	bpl.n	80047bc <_printf_i+0x1ac>
 8004792:	07df      	lsls	r7, r3, #31
 8004794:	bf44      	itt	mi
 8004796:	f043 0320 	orrmi.w	r3, r3, #32
 800479a:	6023      	strmi	r3, [r4, #0]
 800479c:	b91e      	cbnz	r6, 80047a6 <_printf_i+0x196>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	f023 0320 	bic.w	r3, r3, #32
 80047a4:	6023      	str	r3, [r4, #0]
 80047a6:	2310      	movs	r3, #16
 80047a8:	e7b0      	b.n	800470c <_printf_i+0xfc>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	f043 0320 	orr.w	r3, r3, #32
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	2378      	movs	r3, #120	; 0x78
 80047b4:	4828      	ldr	r0, [pc, #160]	; (8004858 <_printf_i+0x248>)
 80047b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ba:	e7e3      	b.n	8004784 <_printf_i+0x174>
 80047bc:	0659      	lsls	r1, r3, #25
 80047be:	bf48      	it	mi
 80047c0:	b2b6      	uxthmi	r6, r6
 80047c2:	e7e6      	b.n	8004792 <_printf_i+0x182>
 80047c4:	4615      	mov	r5, r2
 80047c6:	e7bb      	b.n	8004740 <_printf_i+0x130>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	6826      	ldr	r6, [r4, #0]
 80047cc:	6961      	ldr	r1, [r4, #20]
 80047ce:	1d18      	adds	r0, r3, #4
 80047d0:	6028      	str	r0, [r5, #0]
 80047d2:	0635      	lsls	r5, r6, #24
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	d501      	bpl.n	80047dc <_printf_i+0x1cc>
 80047d8:	6019      	str	r1, [r3, #0]
 80047da:	e002      	b.n	80047e2 <_printf_i+0x1d2>
 80047dc:	0670      	lsls	r0, r6, #25
 80047de:	d5fb      	bpl.n	80047d8 <_printf_i+0x1c8>
 80047e0:	8019      	strh	r1, [r3, #0]
 80047e2:	2300      	movs	r3, #0
 80047e4:	6123      	str	r3, [r4, #16]
 80047e6:	4615      	mov	r5, r2
 80047e8:	e7ba      	b.n	8004760 <_printf_i+0x150>
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	1d1a      	adds	r2, r3, #4
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	681d      	ldr	r5, [r3, #0]
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	2100      	movs	r1, #0
 80047f6:	4628      	mov	r0, r5
 80047f8:	f7fb fd72 	bl	80002e0 <memchr>
 80047fc:	b108      	cbz	r0, 8004802 <_printf_i+0x1f2>
 80047fe:	1b40      	subs	r0, r0, r5
 8004800:	6060      	str	r0, [r4, #4]
 8004802:	6863      	ldr	r3, [r4, #4]
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	2300      	movs	r3, #0
 8004808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800480c:	e7a8      	b.n	8004760 <_printf_i+0x150>
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	462a      	mov	r2, r5
 8004812:	4649      	mov	r1, r9
 8004814:	4640      	mov	r0, r8
 8004816:	47d0      	blx	sl
 8004818:	3001      	adds	r0, #1
 800481a:	d0ab      	beq.n	8004774 <_printf_i+0x164>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	079b      	lsls	r3, r3, #30
 8004820:	d413      	bmi.n	800484a <_printf_i+0x23a>
 8004822:	68e0      	ldr	r0, [r4, #12]
 8004824:	9b03      	ldr	r3, [sp, #12]
 8004826:	4298      	cmp	r0, r3
 8004828:	bfb8      	it	lt
 800482a:	4618      	movlt	r0, r3
 800482c:	e7a4      	b.n	8004778 <_printf_i+0x168>
 800482e:	2301      	movs	r3, #1
 8004830:	4632      	mov	r2, r6
 8004832:	4649      	mov	r1, r9
 8004834:	4640      	mov	r0, r8
 8004836:	47d0      	blx	sl
 8004838:	3001      	adds	r0, #1
 800483a:	d09b      	beq.n	8004774 <_printf_i+0x164>
 800483c:	3501      	adds	r5, #1
 800483e:	68e3      	ldr	r3, [r4, #12]
 8004840:	9903      	ldr	r1, [sp, #12]
 8004842:	1a5b      	subs	r3, r3, r1
 8004844:	42ab      	cmp	r3, r5
 8004846:	dcf2      	bgt.n	800482e <_printf_i+0x21e>
 8004848:	e7eb      	b.n	8004822 <_printf_i+0x212>
 800484a:	2500      	movs	r5, #0
 800484c:	f104 0619 	add.w	r6, r4, #25
 8004850:	e7f5      	b.n	800483e <_printf_i+0x22e>
 8004852:	bf00      	nop
 8004854:	08004b9d 	.word	0x08004b9d
 8004858:	08004bae 	.word	0x08004bae

0800485c <memmove>:
 800485c:	4288      	cmp	r0, r1
 800485e:	b510      	push	{r4, lr}
 8004860:	eb01 0402 	add.w	r4, r1, r2
 8004864:	d902      	bls.n	800486c <memmove+0x10>
 8004866:	4284      	cmp	r4, r0
 8004868:	4623      	mov	r3, r4
 800486a:	d807      	bhi.n	800487c <memmove+0x20>
 800486c:	1e43      	subs	r3, r0, #1
 800486e:	42a1      	cmp	r1, r4
 8004870:	d008      	beq.n	8004884 <memmove+0x28>
 8004872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004876:	f803 2f01 	strb.w	r2, [r3, #1]!
 800487a:	e7f8      	b.n	800486e <memmove+0x12>
 800487c:	4402      	add	r2, r0
 800487e:	4601      	mov	r1, r0
 8004880:	428a      	cmp	r2, r1
 8004882:	d100      	bne.n	8004886 <memmove+0x2a>
 8004884:	bd10      	pop	{r4, pc}
 8004886:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800488a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800488e:	e7f7      	b.n	8004880 <memmove+0x24>

08004890 <_free_r>:
 8004890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004892:	2900      	cmp	r1, #0
 8004894:	d044      	beq.n	8004920 <_free_r+0x90>
 8004896:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800489a:	9001      	str	r0, [sp, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f1a1 0404 	sub.w	r4, r1, #4
 80048a2:	bfb8      	it	lt
 80048a4:	18e4      	addlt	r4, r4, r3
 80048a6:	f000 f913 	bl	8004ad0 <__malloc_lock>
 80048aa:	4a1e      	ldr	r2, [pc, #120]	; (8004924 <_free_r+0x94>)
 80048ac:	9801      	ldr	r0, [sp, #4]
 80048ae:	6813      	ldr	r3, [r2, #0]
 80048b0:	b933      	cbnz	r3, 80048c0 <_free_r+0x30>
 80048b2:	6063      	str	r3, [r4, #4]
 80048b4:	6014      	str	r4, [r2, #0]
 80048b6:	b003      	add	sp, #12
 80048b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048bc:	f000 b90e 	b.w	8004adc <__malloc_unlock>
 80048c0:	42a3      	cmp	r3, r4
 80048c2:	d908      	bls.n	80048d6 <_free_r+0x46>
 80048c4:	6825      	ldr	r5, [r4, #0]
 80048c6:	1961      	adds	r1, r4, r5
 80048c8:	428b      	cmp	r3, r1
 80048ca:	bf01      	itttt	eq
 80048cc:	6819      	ldreq	r1, [r3, #0]
 80048ce:	685b      	ldreq	r3, [r3, #4]
 80048d0:	1949      	addeq	r1, r1, r5
 80048d2:	6021      	streq	r1, [r4, #0]
 80048d4:	e7ed      	b.n	80048b2 <_free_r+0x22>
 80048d6:	461a      	mov	r2, r3
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	b10b      	cbz	r3, 80048e0 <_free_r+0x50>
 80048dc:	42a3      	cmp	r3, r4
 80048de:	d9fa      	bls.n	80048d6 <_free_r+0x46>
 80048e0:	6811      	ldr	r1, [r2, #0]
 80048e2:	1855      	adds	r5, r2, r1
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d10b      	bne.n	8004900 <_free_r+0x70>
 80048e8:	6824      	ldr	r4, [r4, #0]
 80048ea:	4421      	add	r1, r4
 80048ec:	1854      	adds	r4, r2, r1
 80048ee:	42a3      	cmp	r3, r4
 80048f0:	6011      	str	r1, [r2, #0]
 80048f2:	d1e0      	bne.n	80048b6 <_free_r+0x26>
 80048f4:	681c      	ldr	r4, [r3, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	4421      	add	r1, r4
 80048fc:	6011      	str	r1, [r2, #0]
 80048fe:	e7da      	b.n	80048b6 <_free_r+0x26>
 8004900:	d902      	bls.n	8004908 <_free_r+0x78>
 8004902:	230c      	movs	r3, #12
 8004904:	6003      	str	r3, [r0, #0]
 8004906:	e7d6      	b.n	80048b6 <_free_r+0x26>
 8004908:	6825      	ldr	r5, [r4, #0]
 800490a:	1961      	adds	r1, r4, r5
 800490c:	428b      	cmp	r3, r1
 800490e:	bf04      	itt	eq
 8004910:	6819      	ldreq	r1, [r3, #0]
 8004912:	685b      	ldreq	r3, [r3, #4]
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	bf04      	itt	eq
 8004918:	1949      	addeq	r1, r1, r5
 800491a:	6021      	streq	r1, [r4, #0]
 800491c:	6054      	str	r4, [r2, #4]
 800491e:	e7ca      	b.n	80048b6 <_free_r+0x26>
 8004920:	b003      	add	sp, #12
 8004922:	bd30      	pop	{r4, r5, pc}
 8004924:	2400016c 	.word	0x2400016c

08004928 <sbrk_aligned>:
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	4e0e      	ldr	r6, [pc, #56]	; (8004964 <sbrk_aligned+0x3c>)
 800492c:	460c      	mov	r4, r1
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	4605      	mov	r5, r0
 8004932:	b911      	cbnz	r1, 800493a <sbrk_aligned+0x12>
 8004934:	f000 f8bc 	bl	8004ab0 <_sbrk_r>
 8004938:	6030      	str	r0, [r6, #0]
 800493a:	4621      	mov	r1, r4
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f8b7 	bl	8004ab0 <_sbrk_r>
 8004942:	1c43      	adds	r3, r0, #1
 8004944:	d00a      	beq.n	800495c <sbrk_aligned+0x34>
 8004946:	1cc4      	adds	r4, r0, #3
 8004948:	f024 0403 	bic.w	r4, r4, #3
 800494c:	42a0      	cmp	r0, r4
 800494e:	d007      	beq.n	8004960 <sbrk_aligned+0x38>
 8004950:	1a21      	subs	r1, r4, r0
 8004952:	4628      	mov	r0, r5
 8004954:	f000 f8ac 	bl	8004ab0 <_sbrk_r>
 8004958:	3001      	adds	r0, #1
 800495a:	d101      	bne.n	8004960 <sbrk_aligned+0x38>
 800495c:	f04f 34ff 	mov.w	r4, #4294967295
 8004960:	4620      	mov	r0, r4
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	24000170 	.word	0x24000170

08004968 <_malloc_r>:
 8004968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800496c:	1ccd      	adds	r5, r1, #3
 800496e:	f025 0503 	bic.w	r5, r5, #3
 8004972:	3508      	adds	r5, #8
 8004974:	2d0c      	cmp	r5, #12
 8004976:	bf38      	it	cc
 8004978:	250c      	movcc	r5, #12
 800497a:	2d00      	cmp	r5, #0
 800497c:	4607      	mov	r7, r0
 800497e:	db01      	blt.n	8004984 <_malloc_r+0x1c>
 8004980:	42a9      	cmp	r1, r5
 8004982:	d905      	bls.n	8004990 <_malloc_r+0x28>
 8004984:	230c      	movs	r3, #12
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	2600      	movs	r6, #0
 800498a:	4630      	mov	r0, r6
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	4e2e      	ldr	r6, [pc, #184]	; (8004a4c <_malloc_r+0xe4>)
 8004992:	f000 f89d 	bl	8004ad0 <__malloc_lock>
 8004996:	6833      	ldr	r3, [r6, #0]
 8004998:	461c      	mov	r4, r3
 800499a:	bb34      	cbnz	r4, 80049ea <_malloc_r+0x82>
 800499c:	4629      	mov	r1, r5
 800499e:	4638      	mov	r0, r7
 80049a0:	f7ff ffc2 	bl	8004928 <sbrk_aligned>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	4604      	mov	r4, r0
 80049a8:	d14d      	bne.n	8004a46 <_malloc_r+0xde>
 80049aa:	6834      	ldr	r4, [r6, #0]
 80049ac:	4626      	mov	r6, r4
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	d140      	bne.n	8004a34 <_malloc_r+0xcc>
 80049b2:	6823      	ldr	r3, [r4, #0]
 80049b4:	4631      	mov	r1, r6
 80049b6:	4638      	mov	r0, r7
 80049b8:	eb04 0803 	add.w	r8, r4, r3
 80049bc:	f000 f878 	bl	8004ab0 <_sbrk_r>
 80049c0:	4580      	cmp	r8, r0
 80049c2:	d13a      	bne.n	8004a3a <_malloc_r+0xd2>
 80049c4:	6821      	ldr	r1, [r4, #0]
 80049c6:	3503      	adds	r5, #3
 80049c8:	1a6d      	subs	r5, r5, r1
 80049ca:	f025 0503 	bic.w	r5, r5, #3
 80049ce:	3508      	adds	r5, #8
 80049d0:	2d0c      	cmp	r5, #12
 80049d2:	bf38      	it	cc
 80049d4:	250c      	movcc	r5, #12
 80049d6:	4629      	mov	r1, r5
 80049d8:	4638      	mov	r0, r7
 80049da:	f7ff ffa5 	bl	8004928 <sbrk_aligned>
 80049de:	3001      	adds	r0, #1
 80049e0:	d02b      	beq.n	8004a3a <_malloc_r+0xd2>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	442b      	add	r3, r5
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	e00e      	b.n	8004a08 <_malloc_r+0xa0>
 80049ea:	6822      	ldr	r2, [r4, #0]
 80049ec:	1b52      	subs	r2, r2, r5
 80049ee:	d41e      	bmi.n	8004a2e <_malloc_r+0xc6>
 80049f0:	2a0b      	cmp	r2, #11
 80049f2:	d916      	bls.n	8004a22 <_malloc_r+0xba>
 80049f4:	1961      	adds	r1, r4, r5
 80049f6:	42a3      	cmp	r3, r4
 80049f8:	6025      	str	r5, [r4, #0]
 80049fa:	bf18      	it	ne
 80049fc:	6059      	strne	r1, [r3, #4]
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	bf08      	it	eq
 8004a02:	6031      	streq	r1, [r6, #0]
 8004a04:	5162      	str	r2, [r4, r5]
 8004a06:	604b      	str	r3, [r1, #4]
 8004a08:	4638      	mov	r0, r7
 8004a0a:	f104 060b 	add.w	r6, r4, #11
 8004a0e:	f000 f865 	bl	8004adc <__malloc_unlock>
 8004a12:	f026 0607 	bic.w	r6, r6, #7
 8004a16:	1d23      	adds	r3, r4, #4
 8004a18:	1af2      	subs	r2, r6, r3
 8004a1a:	d0b6      	beq.n	800498a <_malloc_r+0x22>
 8004a1c:	1b9b      	subs	r3, r3, r6
 8004a1e:	50a3      	str	r3, [r4, r2]
 8004a20:	e7b3      	b.n	800498a <_malloc_r+0x22>
 8004a22:	6862      	ldr	r2, [r4, #4]
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	bf0c      	ite	eq
 8004a28:	6032      	streq	r2, [r6, #0]
 8004a2a:	605a      	strne	r2, [r3, #4]
 8004a2c:	e7ec      	b.n	8004a08 <_malloc_r+0xa0>
 8004a2e:	4623      	mov	r3, r4
 8004a30:	6864      	ldr	r4, [r4, #4]
 8004a32:	e7b2      	b.n	800499a <_malloc_r+0x32>
 8004a34:	4634      	mov	r4, r6
 8004a36:	6876      	ldr	r6, [r6, #4]
 8004a38:	e7b9      	b.n	80049ae <_malloc_r+0x46>
 8004a3a:	230c      	movs	r3, #12
 8004a3c:	603b      	str	r3, [r7, #0]
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f000 f84c 	bl	8004adc <__malloc_unlock>
 8004a44:	e7a1      	b.n	800498a <_malloc_r+0x22>
 8004a46:	6025      	str	r5, [r4, #0]
 8004a48:	e7de      	b.n	8004a08 <_malloc_r+0xa0>
 8004a4a:	bf00      	nop
 8004a4c:	2400016c 	.word	0x2400016c

08004a50 <_realloc_r>:
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	4680      	mov	r8, r0
 8004a56:	4614      	mov	r4, r2
 8004a58:	460e      	mov	r6, r1
 8004a5a:	b921      	cbnz	r1, 8004a66 <_realloc_r+0x16>
 8004a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a60:	4611      	mov	r1, r2
 8004a62:	f7ff bf81 	b.w	8004968 <_malloc_r>
 8004a66:	b92a      	cbnz	r2, 8004a74 <_realloc_r+0x24>
 8004a68:	f7ff ff12 	bl	8004890 <_free_r>
 8004a6c:	4625      	mov	r5, r4
 8004a6e:	4628      	mov	r0, r5
 8004a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a74:	f000 f838 	bl	8004ae8 <_malloc_usable_size_r>
 8004a78:	4284      	cmp	r4, r0
 8004a7a:	4607      	mov	r7, r0
 8004a7c:	d802      	bhi.n	8004a84 <_realloc_r+0x34>
 8004a7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004a82:	d812      	bhi.n	8004aaa <_realloc_r+0x5a>
 8004a84:	4621      	mov	r1, r4
 8004a86:	4640      	mov	r0, r8
 8004a88:	f7ff ff6e 	bl	8004968 <_malloc_r>
 8004a8c:	4605      	mov	r5, r0
 8004a8e:	2800      	cmp	r0, #0
 8004a90:	d0ed      	beq.n	8004a6e <_realloc_r+0x1e>
 8004a92:	42bc      	cmp	r4, r7
 8004a94:	4622      	mov	r2, r4
 8004a96:	4631      	mov	r1, r6
 8004a98:	bf28      	it	cs
 8004a9a:	463a      	movcs	r2, r7
 8004a9c:	f7ff fbb8 	bl	8004210 <memcpy>
 8004aa0:	4631      	mov	r1, r6
 8004aa2:	4640      	mov	r0, r8
 8004aa4:	f7ff fef4 	bl	8004890 <_free_r>
 8004aa8:	e7e1      	b.n	8004a6e <_realloc_r+0x1e>
 8004aaa:	4635      	mov	r5, r6
 8004aac:	e7df      	b.n	8004a6e <_realloc_r+0x1e>
	...

08004ab0 <_sbrk_r>:
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	4d06      	ldr	r5, [pc, #24]	; (8004acc <_sbrk_r+0x1c>)
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	4608      	mov	r0, r1
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	f7fb fefa 	bl	80008b4 <_sbrk>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d102      	bne.n	8004aca <_sbrk_r+0x1a>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	b103      	cbz	r3, 8004aca <_sbrk_r+0x1a>
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	bd38      	pop	{r3, r4, r5, pc}
 8004acc:	24000174 	.word	0x24000174

08004ad0 <__malloc_lock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__malloc_lock+0x8>)
 8004ad2:	f000 b811 	b.w	8004af8 <__retarget_lock_acquire_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	24000178 	.word	0x24000178

08004adc <__malloc_unlock>:
 8004adc:	4801      	ldr	r0, [pc, #4]	; (8004ae4 <__malloc_unlock+0x8>)
 8004ade:	f000 b80c 	b.w	8004afa <__retarget_lock_release_recursive>
 8004ae2:	bf00      	nop
 8004ae4:	24000178 	.word	0x24000178

08004ae8 <_malloc_usable_size_r>:
 8004ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aec:	1f18      	subs	r0, r3, #4
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	bfbc      	itt	lt
 8004af2:	580b      	ldrlt	r3, [r1, r0]
 8004af4:	18c0      	addlt	r0, r0, r3
 8004af6:	4770      	bx	lr

08004af8 <__retarget_lock_acquire_recursive>:
 8004af8:	4770      	bx	lr

08004afa <__retarget_lock_release_recursive>:
 8004afa:	4770      	bx	lr

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
